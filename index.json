[
{
	"uri": "https://oracle.github.io/weblogic-toolkit-ui/navigate/kubernetes/k8s-client-config/",
	"title": "Client Configuration",
	"tags": [],
	"description": "Client Configuration helps you get the necessary connectivity to your Kubernetes cluster.",
	"content": "Contents  Client Configuration  Authentication with Managed Kubernetes Clusters Verify Connectivity    Client Configuration Client Configuration helps you get the necessary connectivity to your Kubernetes cluster. Use the Kubernetes Cluster Type field to select the target Kubernetes cluster type to show instructions for configuring kubectl to successfully connect to the cluster.\n The Kubectl Executable to Use field tells the WKT UI application where to find the correct version of kubectl to use. By using the Kubernetes Client Config File(s) field, you can specify a different Kubernetes client configuration file instead of, or in addition to, the default .kube/config file from your home directory. For environments where the client is configured to connect to multiple clusters, use the Kubernetes Config Context to Use field to specify the configuration file\u0026rsquo;s context associated with the cluster to which you want to connect. The Helm Executable to Use field tells the application where to find Helm, which is used to install the WebLogic Kubernetes Operator and ingress controllers. For more information about Helm, see the Helm documentation.  Authentication with Managed Kubernetes Clusters Most cloud vendors require the use of their command-line tooling to authenticate kubectl connections to their managed Kubernetes clusters. For example, after kubectl is configured to connect to a Kubernetes cluster managed by the Oracle Kubernetes Engine (OKE), the Kubernetes client configuration file will have a section that looks similar to the one shown here.\nusers: - name: user-abcdefghi8d user: exec: apiVersion: client.authentication.k8s.io/v1beta1 command: oci args: - ce - cluster - generate-token - --cluster-id - ocid1.cluster.oc1.phx.aaaaaaaaahdirjdmcjfpogfkdhjsdhshssk2abcdefghijk2d - --region - us-phoenix-1 env: [] This configuration causes each kubectl invocation that references this user definition to execute the oci command (the Oracle Cloud command-line tool) to get the credentials necessary to successfully authenticate to the cluster. If the oci executable is not in a directory in the PATH environment variable when the kubectl command is executed, then an error similar to the one shown here will occur.\nFailed to verify Kubernetes client connectivity: Unable to verify Kubernetes client connectivity: Command failed: /Users/rpatrick/bin/kubectl version --short Unable to connect to the server: getting credentials: exec: executable oci not found It looks like you are trying to use a client-go credential plugin that is not installed. To learn more about this feature, consult the documentation available at: https://kubernetes.io/docs/reference/access-authn-authz/authentication/#client-go-credential-plugins. Verify Connectivity To verify the application configuration for connecting to the specified Kubernetes cluster, use the Verify Connectivity button on the Client Configuration page or Go \u0026gt; Verify Kubernetes Client Connection.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-toolkit-ui/navigate/verrazzano/vz-client-config/",
	"title": "Client Configuration",
	"tags": [],
	"description": "Client Configuration helps you get the necessary connectivity to your Kubernetes cluster.",
	"content": "Contents  Client Configuration  Authentication with Managed Kubernetes Clusters Verify Connectivity    Client Configuration Client Configuration helps you get the necessary connectivity to your Kubernetes cluster. Use the Kubernetes Cluster Type field to select the target Kubernetes cluster type to show instructions for configuring kubectl to successfully connect to the cluster.\n The Kubectl Executable to Use field tells the WKT UI application where to find the correct version of kubectl to use. By using the Kubernetes Client Config File(s) field, you can specify a different Kubernetes client configuration file instead of, or in addition to, the default .kube/config file from your home directory. For environments where the client is configured to connect to multiple clusters, use the Kubernetes Config Context to Use field to specify the configuration file\u0026rsquo;s context associated with the cluster to which you want to connect.  Authentication with Managed Kubernetes Clusters Most cloud vendors require the use of their command-line tooling to authenticate kubectl connections to their managed Kubernetes clusters. For example, after kubectl is configured to connect to a Kubernetes cluster managed by the Oracle Kubernetes Engine (OKE), the Kubernetes client configuration file will have a section that looks similar to the one shown here.\nusers: - name: user-abcdefghi8d user: exec: apiVersion: client.authentication.k8s.io/v1beta1 command: oci args: - ce - cluster - generate-token - --cluster-id - ocid1.cluster.oc1.phx.aaaaaaaaahdirjdmcjfpogfkdhjsdhshssk2abcdefghijk2d - --region - us-phoenix-1 env: [] This configuration causes each kubectl invocation that references this user definition to execute the oci command (the Oracle Cloud command-line tool) to get the credentials necessary to successfully authenticate to the cluster. If the oci executable is not in a directory in the PATH environment variable when the kubectl command is executed, then an error similar to the one shown here will occur.\nFailed to verify Kubernetes client connectivity: Unable to verify Kubernetes client connectivity: Command failed: /Users/rpatrick/bin/kubectl version --short Unable to connect to the server: getting credentials: exec: executable oci not found It looks like you are trying to use a client-go credential plugin that is not installed. To learn more about this feature, consult the documentation available at: https://kubernetes.io/docs/reference/access-authn-authz/authentication/#client-go-credential-plugins. Verify Connectivity To verify the application configuration for connecting to the specified Kubernetes cluster, use the Verify Connectivity button on the Client Configuration page or Go \u0026gt; Verify Kubernetes Client Connection.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-toolkit-ui/setup/quickstart/qs-kubernetes/k8s-client-config/",
	"title": "Configure Kubernetes Cluster Connectivity",
	"tags": [],
	"description": "Client configuration helps you get the necessary connectivity to your Kubernetes cluster.",
	"content": "First, you need to configure your Kubernetes client (kubectl) to connect and authenticate to your Kubernetes cluster.\nGo to the Kubernetes \u0026gt; Client Configuration page, shown in the following image.\nBy selecting the appropriate Kubernetes Cluster Type, the instructions panel will display the steps needed to properly configure kubectl. Select your Kubernetes Cluster Type and follow the instructions (including the linked instructions) until you can successfully connect using kubectl from the command line. (Because these steps are generally well-documented and well-tested, we will not repeat them here.) For those running on macOS, please remember to do any macOS-specific step, which is only visible when the WKTUI application is running on macOS. For example, Step 4 in the preceding image.\nAfter invoking kubectl from the command line, connects to the target Kubernetes cluster, fill out the rest of the form. It is always best to select the appropriate Kubectl Config Context to Use for your project. Because you may have multiple Kubernetes Client Config Files, select the appropriate one to use first. Then, you can use either the Chooser icon or the Get Current Context icon to get the appropriate context value from the specified file. In the preceding image, the context is named oke only because you edited the configuration file to change the OKE-generated context name to one you could recognize. Prior to proceeding, please run Verify Connectivity.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-toolkit-ui/setup/quickstart/qs-verrazzano/vz-client-config/",
	"title": "Configure Kubernetes Cluster Connectivity",
	"tags": [],
	"description": "Client Configuration helps you get the necessary connectivity to your Kubernetes cluster.",
	"content": "First, you need to configure your Kubernetes Client (kubectl) to connect and authenticate to your Kubernetes cluster.\nGo to the Verrazzano \u0026gt; Client Configuration page, as shown in the following image.\nBy selecting the appropriate Kubernetes Cluster Type, the instructions panel will display the steps needed to properly configure kubectl. Please select your Kubernetes Cluster Type and follow the instructions (including the linked instructions) until you can successfully connect using kubectl from the command line. (Because these steps are generally well-documented and well-tested, we will not repeat them here.) For those running on macOS, please remember to do any macOS-specific step, which is only visible when the WKTUI application is running on macOS. For example, Step 4 in the preceding image.\nVerrazzano supports multiple clusters and all Verrazzano installations have an administrative cluster, whose name is always local. For our example, we will use the admin cluster with no managed clusters.\nAfter invoking kubectl from the command line, connects to the target Kubernetes cluster, fill out the rest of the form. It is always best to select the appropriate Kubectl Config Context to Use for your project. Because you may have multiple Kubernetes Client Config Files, select the appropriate one to use first. Then, you can use either the Chooser icon or the Get Current Context icon to get the appropriate context value from the specified file. In the preceding image, the context is named vz only because you edited the configuration file to change the OKE-generated context name to one you could recognize. Prior to proceeding, please run Verify Connectivity.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-toolkit-ui/setup/quickstart/qs-advanced/offline-discover/",
	"title": "Offline Discover",
	"tags": [],
	"description": "Add Model Using Discover Model (Offline)",
	"content": "In WKTUI, go to the Model page and select the Code View tab. Select the File \u0026gt; Add Model \u0026gt; Discover Model (offline) menu item. The following dialog box appears. Enter the path to the $WKTUI_QS_HOME/todolist_domain directory as the Domain Home, as shown in the following image.\nTo start the discovery process, click OK. After it completes, make the following required model changes:\n Fill in the credentials using the values provided when you ran the startMySQL and createToDoListDomain scripts. Change localhost in the JDBC URL on line 34 to mysql.  Because a server template’s ListenPortEnabled value defaults to true, this attribute was omitted from the discovered model. To make your model look the same as the hand-built one, add the ListenPortEnabled attribute with a value of true to the server template, as shown in the following image.\nAt this point, the model is roughly equivalent to the hand-built one shown in the Validate Model Code View. After you prepare the model, all the minor differences will go away.\nYou can stop any running WebLogic Servers in the local domain, and stop and remove the mysql container. To continue, return to Validate and Prepare the Model.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-toolkit-ui/setup/prerequisites/",
	"title": "Prerequisites",
	"tags": [],
	"description": "Install the prerequisite requirements.",
	"content": "WebLogic Kubernetes Toolkit UI has a number of prerequisites that must be installed locally to fully use the WKT UI application functionality.\nThese include:\n Java Development Kit (JDK) - Required by both WebLogic Deploy Tooling and WebLogic Image Tool. Install a JDK version that is compatible with your local WebLogic Server installation. WebLogic Server (WLS) - Required by WebLogic Deploy Tooling. Install a WebLogic Server version 12.2.1.3.0 or later; it is a best practice to install the latest Patch Set Updates (PSUs) and other recommended patches. The application uses WebLogic Server to gain access to the WebLogic Server Scripting Tool (WLST) and other related artifacts to use as a client. WebLogic Remote Console version 2.3.0 or later. Provides user interface for creating WDT models in Model View. Docker (or Podman) - Required to create images locally and interact with image registries. If running on Windows or macOS, try Rancher Desktop, Docker Desktop, or even Podman Desktop. kubectl - The Kubernetes client; the version should align with the Kubernetes cluster version. Required to interact with your Kubernetes cluster. For more information, see the Kubernetes Client Configuration page in the UI. Cloud Provider\u0026rsquo;s Command-Line Interface (CLI) tool - If your Kubernetes cluster is running in one of the cloud provider\u0026rsquo;s managed Kubernetes services, then you will need to download and install the cloud provider\u0026rsquo;s CLI. This is typically required to configure kubectl to properly authenticate to the Kubernetes cluster. Again, see the Kubernetes Client Configuration page for more information about configuring kubectl to work with your cluster. helm - Helm version 3.9 or later. Required to install the WebLogic Kubernetes Operator and to install an ingress controller. openssl - Used to generate an X.509 TLS certificate for ingress routes, should you ask the application to generate one for you.  The WKT UI application is built using the Electron framework and as such, we support only the platforms and versions supported by Electron; see the listing under Platform Support. For example, because of the Electron requirement for Fedora 24 or newer, we support only versions 8.0 and higher of Oracle Linux, RedHat Linux, and CentOS Linux.\n In addition to these local software dependencies, you will need a Kubernetes cluster to which you can deploy your containerized WebLogic Server domain and its applications. If you do not already have a model, then you can either write one by hand using the WKT UI application or discover the model from an existing domain. Most likely, you\u0026rsquo;ll want to start with a WebLogic domain that can be used to discover the model from the domain.\nLinux Prerequisites   For RPM-based systems, such as Oracle, RedHat, CentOS, and some others:\n For storing credentials in the OS native credentials store, you must have a desktop environment. If your system does not have a graphical desktop environment, then you can install one; for example, installing GNOME Desktop on Oracle Linux:  https://support.oracle.com/knowledge/Oracle%20Linux%20and%20Virtualization/2717454_1.html\n For running the WKT UI on a remote machine without desktop environment and accessing it through X forwarding, you need to ensure X forwarding is working properly. For example,  sudo dnf install xterm logout ssh -X ... xterm   For Debian-based systems, such as Ubuntu and Debian:\n For storing credentials in the OS native credentials store, you must have a desktop environment. If your system does not have a graphical desktop environment, then you can install one; for example, installing GNOME on Ubuntu 20x:  sudo apt install gnome-session gdm3 sudo reboot   For running the WKT UI on a remote machine without desktop environment and accessing it through X forwarding, you need to ensure X forwarding is working properly. For example,\nsudo apt install xterm logout ssh -X ... xterm     "
},
{
	"uri": "https://oracle.github.io/weblogic-toolkit-ui/setup/quickstart/prereqs/",
	"title": "Prerequisites",
	"tags": [],
	"description": "",
	"content": "To work through the Quick Start guide, you will need to install the following software:\n Docker (or Podman) – If running on Windows or macOS, try Rancher Desktop, Docker Desktop, or even Podman Desktop. kubectl – The Kubernetes client; the version should align with the Kubernetes cluster version. Oracle Java JDK 11 WebLogic Server 14.1.1 Helm 3.9 or later – Only needed if following the WebLogic Kubernetes Operator track. Maven 3.6 or later – Only needed if rebuilding the sample application WAR file.  "
},
{
	"uri": "https://oracle.github.io/weblogic-toolkit-ui/navigate/project-settings/",
	"title": "Project Settings",
	"tags": [],
	"description": "",
	"content": "The first stop for every new project is Project Settings. In this section, you make decisions and provide input for the project on:\n Credential Storage Domain Location Kubernetes Environment Target Type JDK and WebLogic Server Installation Directories Image Build Tool Type and Executable Location  When running the WKT UI application on Windows or Linux, the application inherits its environment from the user. For example, adding a directory to the PATH used by the application is just a matter of changing your PATH environment variable and restarting the application. On macOS, things are a bit more complicated.\nWhen running the application on macOS, the application inherits the environment of a daemon process called launchd instead of your environment. By default, the launchd environment contains only a few core directories on the PATH (that is, /usr/bin, /bin, /usr/sbin, and /sbin). This will, for example, cause kubectl invocations requiring access to one of the cloud providers' command-line tooling to fail if the tool is not found in one of those locations. While it is possible for an administrative user to change the environment that launchd uses to address this issue, the WKT UI application provides the Extra Path Directory table to explicitly add the directory where the cloud providers' command-line tooling is installed, to the PATH that the application uses to invoke docker, podman, kubectl, and helm. Also, use the Extra Environment Variable Name/Extra Environment Variable Value table to define extra environment variables as needed. Note that this extra environment configuration is used only when invoking Docker/Podman, kubectl, and Helm. This section is visible only when running the application on macOS.\nChoosing a Credential Storage Scheme The WKT UI application can securely store credentials for your project or not store them at all. The three choices are:\n Use the Native OS Credential Store Store Encrypted Credentials in the WKT Project File Not Store Credentials  If you choose Store in Native OS Credential Store, then you will be using the Windows Credential Manager, the macOS Keychain, or the Linux libsecret library\u0026rsquo;s credential store. These credential stores offer a well-known, secure mechanism for storing credentials that most users already understand. The only downside to this scheme is that the credentials are stored only on the local machine. Anyone trying to share their project with others users will have to have the other users re-enter the credentials so that they get saved to their local machine\u0026rsquo;s credential store.\nThe WKT UI application can require storing a dozen or more credentials, depending on your WebLogic Server domain configuration. Upon first access by the WKT UI to load credentials from the credential store, the OS will prompt whether you want to allow the application access to each credential, prompting you once for each credential. This can get annoying, but on some platforms (for example, macOS), you have the option of telling the OS to always allow access to the credential by the WKT UI application.\n The other choice to store credentials, Store Encrypted in Project File, uses a passphrase-based encryption built into the application that allows the credentials to be stored inline in the WKT Project file. The algorithms and techniques used follow the current industry standards and recommendations; however, because this project is open source, you can look at the details, if you are interested. The only downside to this approach is that, because the passphrase itself is never stored, you must share the passphrase with any other users that should be able to use the WKT Project file.\nA creative person might realize that they can use the passphrase-based encryption to move credentials normally stored in the native OS credential store to another machine. The steps to accomplish this would be:\n Open the project using the native OS credential store on the machine where the credentials are stored. Change the credential storage option to passphrase-based encryption and enter a passphrase. Save the project file. Open the project file on a different machine, supplying the passphrase entered in step 2. Change the credential storage option to native OS credential store. Save the project file.  The final choice, Not Stored, is to not store the credentials at all. While this is a viable option, it also means that whenever you need to run any of the actions that require credentials, you will need to re-enter the value of every credential in the project.\nChoosing a Domain Location When getting started with a new WKT Project, one of the first things to consider is where you want the domain to reside. Domains can reside in a container, in an image, or in a persistent volume. Your choice will expose and hide different fields across most sections of the UI. The following describe the implications of the three locations:\n  Created in the container from the model in the image - The newest and most popular location for a domain is in the container. This is known as \u0026ldquo;Model in Image\u0026rdquo; but also referred to as a \u0026ldquo;From Model\u0026rdquo; in the underlying WKT tooling. In this case, the set of model-related files are added to the image. When the WebLogic Kubernetes Operator domain object is deployed, its inspector process runs and creates the WebLogic Server domain inside a running container on-the-fly. While this process adds a small amount of overhead at startup, it also makes it easier to maintain the image. For example, you can have a common WebLogic Server image that is updated periodically to pick up the latest Patch Set Updates (PSUs). Then, you use that image to add the most recent version of the WebLogic Deploy Tooling and your domain model files as a layer on top.\n  Created as part of the image - This selection stores the domain in the image. This is known as \u0026ldquo;Domain in Image\u0026rdquo; but also is referred to as \u0026ldquo;Image\u0026rdquo; in the WebLogic Kubernetes Operator configuration. Using this option, the domain is created from the model by the WebLogic Image Tool (using the WebLogic Deploy Tooling) and baked into the image. While this saves a little overhead at startup, it is more expensive to maintain due to the need to recreate the domain every time a new WebLogic Server image is created.\n  Externally created in a Kubernetes persistent volume - This selection stores the domain in a Kubernetes persistent volume; this is known as \u0026ldquo;Domain in PV\u0026rdquo;. This closely approximates the traditional way of maintaining a domain where the domain is created on disk and then used and maintained for as long as necessary. Depending on which Fusion Middleware products you are using, this may be your only supported choice for running the domain in Kubernetes. The WKT UI application currently doesn\u0026rsquo;t do anything to help you create the persistent volume, the necessary persistent volume claim, or the domain. After those things exist, the application will allow you to use them to deploy new domains stored in a persistent volume.\n  Choosing a Kubernetes Environment Target Type The target type tells the application what sort of Kubernetes environment that you plan to use. Currently, WebLogic Kubernetes Operator and Verrazzano are the only two choices. The application uses the target type to:\n Tell WDT how to prepare the model for deployment. Determine what sections and their associated actions within the application, to display.  For example, the Kubernetes pages are relevant to the WebLogic Kubernetes Operator target type, so those pages and their associated actions are hidden when the Verrazzano target type is selected; instead, the Verrazzano pages are displayed.\nChoosing the Java and Oracle Installation Directories The application uses these directories when invoking the WebLogic Deploy Tooling and WebLogic Image Tool; it does not use them for any other purpose. When selecting these directories, make sure to select the same directory you would use to set the JAVA_HOME and ORACLE_HOME (or MW_HOME) environment variables. These are generally the top-level installation directories.\nChoosing the Image Build Tool To build new images, inspect images, and interact with image repositories, the WKT UI application uses an image build tool, which defaults to docker. The image build tool must be installed locally, as mentioned in the Prerequisites. While docker is currently the most popular tool, many vendors (for example, Oracle, IBM RedHat, Google) are moving to use podman by default.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-toolkit-ui/concepts/",
	"title": "About the WKT UI Application",
	"tags": [],
	"description": "",
	"content": "Contents  WKT Project File Settings Outside the WKT Project File  Environment Variables User Preferences  Proxy Configuration Logging Configuration WebLogic Kubernetes Toolkit UI Introduction Configuration   External Applications Bundled WKT Applications    Before giving you the whirlwind tour of the WKT UI application, it is important to know that the application is a native, desktop application. It uses native operating system features, such as:\n Native menus - Some of the application\u0026rsquo;s functionality is available only by using the menus. Registering file extensions - The application installer registers the .wktproj extension and associates itself with that extension. For example, this lets you double-click on the file in the native file browser and have the application start and open the selected project. Recent files integration - As you work with .wktproj files, the application adds those files to the OS-maintained list of recently used files. This causes these files to show up in OS-specific locations to provide shortcuts for opening the file with the application. For example, on macOS, right-clicking on the application icon in the dock will display the recently used .wktproj files and selecting one will open an application window and load the contents of the .wktproj file.  WKT Project File What is a .wktproj file? Simply put, it is the application\u0026rsquo;s equivalent of an Integrated Development Environment (IDE) project file. It stores:\n Metadata about the UI project. Pointers to WDT model-related files used by the project. Form field data that you enter into the application.  There are two ways to create a new project:\n Explicitly - Use File \u0026gt; New Project and select the file location and name. Implicitly - Use the application to start working. After you trigger an action that needs a project file, you are prompted to select the file location and name.  Note that the file extension for project files must be .wktproj. Otherwise, the application will not recognize the file as a project and will not allow it to be opened as a project file.\nThe WKT UI application uses a one project per window paradigm and most everything you do in the window is affected by the project data, either stored directly in the project file or in the WDT model-related files referenced by the project. However, there are a few exceptions that are covered in Settings Outside the WKT Project File.\nSettings Outside the WKT Project File Multiple factors influence the behavior of the WKT UI application in a particular environment. Other than the WKT Project file, those include:\n Environment Variables - The application uses the environment it inherits when it is started. User Preferences - The application\u0026rsquo;s user preferences file stores shared, user-level settings that transcend project boundaries. External Applications - The application or its components depend on an application being available and properly configured. Bundled WKT Applications - The application bundles its own copies of WebLogic Deploy Tooling and WebLogic Image Tool.  Environment Variables Some of the application\u0026rsquo;s behavior is influenced by environment variables it inherits when it is started. Environment variables affect the behavior of the WKT UI application when computing default values for application form fields. Some examples are:\n PATH - Used to locate executables like docker, helm, and kubectl. JAVA_HOME - Used as one way to find the directory where the Java Development Kit (JDK) is installed. ORACLE_HOME and MW_HOME - Used to find the Oracle Fusion Middleware installation directory.  On Windows and Linux platforms, this tends to be the user\u0026rsquo;s environment that they have configured to be used when they log in. On macOS, native applications do not inherit the user\u0026rsquo;s login environment. Instead, the application inherits the environment configured by the launchd daemon process. If you are running on macOS, then you should keep this in mind when the application doesn\u0026rsquo;t behave as you expect. For more information, see Project Settings.\n User Preferences The Preferences menu lets you configure settings that affect the behavior of the WKT UI application for the user across all instances of the application on the machine. These user-visible settings include the following categories:\n Proxy Configuration Logging Configuration WebLogic Kubernetes Toolkit UI Introduction Configuration  Settings are also used to store internally used values that impact the appearance of the application. For example, the Window size is stored so that the application will open the window with your last known window size. The list of such appearance-related settings will likely grow over time.\nProxy Configuration If the WKT UI application is to be run from an environment where a proxy server is required to access the Internet, then you must configure the proxy server settings to allow Internet access. Currently, the UI depends on access to github.com to access release information and download new releases of the WKT tools and the UI itself. This connectivity is used in various places to determine default values for input data (for example, the default image tag to use for installing the WebLogic Kubernetes Operator) and providing updated features for the WKT tools bundled with the application, as well as updating the WKT UI application itself when a new release becomes available. Depending on the project configuration, the application may also require access to other sites, such as Docker Hub and other container registries, Helm chart download sites, and cloud-provider sites for authenticating to and accessing remote Kubernetes clusters.\nTo configure the proxy environment, use the Preferences menu to add or update the following fields, as needed:\n HTTPS Proxy URL - The full URL to the proxy server (for example, http://my-proxy-server.mycompany.com:80). Bypass Proxy Hosts - The comma-separated list of DNS or IP patterns that should not go through the proxy. For example, a value of .us.mycompany.com,.emea.mycompany.com,.apac.mycompany.com will skip the proxy for any DNS name that ends in one of the three domain names.  Logging Configuration Using this section, you can configure the logging output level and control the log file directory. The defaults are:\n File Transport Log Level - The logging level below which log messages will be discarded. For example, Debug messages will be discarded if the level is set to Info. The default value is Info. Log File Directory - The directory to which log files are written. The default is the user\u0026rsquo;s temporary directory, as defined by the operating system.  WebLogic Kubernetes Toolkit UI Introduction Configuration This setting lets you turn on or off the in-application introductory information being displayed at startup. Show Introduction is always accessible from the Help menu.\nExternal Applications The WKT UI application depends on several external applications for its functionality. As such, it is important to install and configure these external applications properly on the local machine on which the application is running.\n docker (or podman) - Used to create new images and inspect the contents of custom base images. The WebLogic Image Tool depends on docker (or podman) for this functionality. docker (or podman) is also used to log in to and interact with image registries. kubectl - Used to get, create, and update configuration objects in your Kubernetes cluster. It is critical that the kubectl configuration file is properly set up to allow kubectl to authenticate to the cluster. helm - Used to install the WebLogic Kubernetes Operator and ingress controllers. openssl - Used to generate X.509 TLS certificates, should you ask the application to generate one for your ingress route(s), only if you ask the application to generate it for you.  Bundled WKT Applications WebLogic Deploy Tooling (WDT) and WebLogic Image Tool (WIT) are bundled with the WKT UI application. These tools are:\n WDT - Used to support discovering a model from an existing domain, prepare the model for a particular Kubernetes target type, and is used by the WebLogic Image Tool when creating the domain inside the image. WIT - Used to create a new image for your WebLogic Server domain. It is also used to inspect any custom base image that you might specify be used for creating the new image.  Use Help \u0026gt; Check For Updates periodically to make sure you are using the latest versions of these bundled tools.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-toolkit-ui/setup/quickstart/get-todo-app/",
	"title": "Get the ToDo List sample application",
	"tags": [],
	"description": "",
	"content": "The Quick Start tutorial employs a simple ToDo List application that uses a MySQL database running in a container to maintain its state. To get the application and supporting files, use one of the following methods:\n  Download the quickstart.zip or quickstart.tar.gz file from the latest WKTUI release on GitHub.\n  Clone the WKTUI GitHub repository and refer to the samples/quickstart subdirectory.\n  "
},
{
	"uri": "https://oracle.github.io/weblogic-toolkit-ui/setup/quickstart/qs-kubernetes/k8s-wko/",
	"title": "Install the WebLogic Kubernetes Operator",
	"tags": [],
	"description": "Install the WebLogic Kubernetes Operator in the target Kubernetes cluster.",
	"content": "The WebLogic Kubernetes Operator (WKO) manages WebLogic or FMW domains for a set of namespaces in a Kubernetes cluster. While it is possible to install multiple operators that manage disparate sets of namespaces in a Kubernetes cluster, typically, there is no need to do this.\nTo install the operator, go to the Kubernetes \u0026gt; WebLogic Operator page, verify the settings, and click Install Operator. For these exercises, you\u0026rsquo;ll use the default values, as shown in the following image.\nAfter the operator is installed successfully, you can move on to the next section.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-toolkit-ui/setup/quickstart/qs-verrazzano/vz-install/",
	"title": "Install Verrazzano",
	"tags": [],
	"description": "Install Verrazzano in the target Kubernetes cluster.",
	"content": "To install Verrazzano, go to the Verrazzano \u0026gt; Installation page. Set the Release Version field to the newest version listed, set the other fields to match those in the following image, and click Install Verrazzano.\nVerrazzano installation takes some time to complete, typically 15 to 30 minutes. Use Check Verrazzano Install Status to determine when Verrazzano installation is complete. After it\u0026rsquo;s complete, you can move on to the next section.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-toolkit-ui/navigate/verrazzano/vz-install/",
	"title": "Installation",
	"tags": [],
	"description": "Install Verrazzano in the target Kubernetes cluster.",
	"content": "Contents  Verrazzano Design View Code View Install Verrazzano Check Verrazzano Installation Status  Verrazzano This section provides support for installing Verrazzano in the target Kubernetes cluster. For detailed information about Verrazzano, see the Verrazzano documentation.\nDesign View Design View helps you specify the data needed to install Verrazzano to manage WebLogic domains in one or more Kubernetes namespaces. To install Verrazzano, simply provide values for the following fields:\n Install Name - The name to give the Verrazzano object during installation. Install Profile - The Verrazzano installation profile; the choices are: Dev (default) and Production. Release Version - Required. Select the desired Verrazzano release version. Install Jaeger - Optional. Select whether to install the Jaeger transaction tracing component. If selected, then provide the percentage of Istio requests to be traced in Jaeger in the Istio Tracing Sampling Rate field.  Code View Install Script displays a shell script that you can use as a starting point for automating the installation of Verrazzano into Kubernetes.\nIf it is not already selected, then use the Script Language drop-down menu to choose the desired scripting language. Note that the application is providing a working sample script to show how the process might be automated. Before using the script, review the script and make any changes necessary for your environment. One typical change that would be considered a best practice would be to change the script to accept either command-line arguments or externally set environment variables to specify any credentials required by the script to eliminate hard-coding the credentials in the script itself. This change is left as an exercise for you because different environments typically will have existing standards for securely handling such credentials.\nVerrazzano Resource displays the Verrazzano resource definition that you\u0026rsquo;ve specified.\nInstall Verrazzano Install Verrazzano installs Verrazzano in the target Kubernetes cluster. You access this action by using the Install Verrazzano button on the Installation page or the Go \u0026gt; Install Verrazzano menu item.\nCheck Verrazzano Installation Status Initial Verrazzano installation proceeds quickly, however, reaching completion takes a somewhat longer time. Use the Check Verrazzano Install Status button or the Go \u0026gt; Check Verrazzano Install Status menu item to monitor its progress.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-toolkit-ui/navigate/model/",
	"title": "Model",
	"tags": [],
	"description": "",
	"content": "Contents  Model Design View Code View  Model Editor Variables Editor Archive Editor   Validate Model Prepare Model  Model The Model section helps you work with WebLogic Deploy Tooling models for a WebLogic domain. A WebLogic Deploy Tooling model for a domain can include the following file types:\n Model file - A declarative definition of the domain configuration. Variable file - A property file that maps names to values. These names can be referenced from the model file to allow a model to be used across environments by applying the variable file for a particular environment to the model. Archive file - A ZIP file containing application binaries and other files and directories needed to run the domain.  For more information about WebLogic Deploy Tooling models, see Metadata Model and Archive File in the WebLogic Deploy Tooling documentation.\nDesign View The Design View is provided through integration with the WebLogic Remote Console. For version details, see Prerequisites. Upon first access, provide the location of the Remote Console installation directory, then click Start WebLogic Remote Console.\nUse the Model Design View pages to create or edit your WDT model files. For reference, see WDT Model Files in the Remote Console documentation. In addition, use the Help (?) icon to the left of each field to access summary and detailed help for the field. Or, click the ? icon in the top right of the content pane to toggle the view of the reference information for all of the fields displayed on the page.\nThe WDT model files that you configure will be reflected in the Code View. Using the Model Design View pages, if you select the \u0026ldquo;circle/arrow\u0026rdquo; icon beside a field, a dialog appears with the option of setting the field to a variable. The variable will show up in both the model and the variables editor on the Code View page. Likewise, when adding an application, you supply the path to the EAR, WAR, or JAR file (or directory); that path will be put in the archive editor on the Code View page.\nNote that if you create a new model using the Design View pages, then the Design View will insert the AdminUserName and AdminPassword fields into the domainInfo section of the model with their values set to variables whose values you will need to provide. This is intended to help you create a domain with all of the required fields.\nCode View Using an IDE-like layout, the Code View provides editor panes for editing the model, variables, and archive files, each of which support creating and editing the domain\u0026rsquo;s WDT files. When working with an editor, there are several things to keep in mind:\n When working with a WKT Project that has no associated WDT file for storing the data, entering data into an editor will cause a new WDT file with the editor\u0026rsquo;s current content to be created and associated with the project. Changes made in the editor are buffered in memory until the WKT Project is saved. Adding, deleting, or modifying data in the variable or archive editors will not change the model references. You will need to make sure that the model references are accurate and up to date.  While it is possible to use the WKT UI application to create the files from scratch, the File \u0026gt; Add Model menu supports adding existing files or using the WebLogic Deploy Tooling\u0026rsquo;s Discover Domain Tool to create a model of an existing domain.\nWhile WebLogic Deploy Tooling supports using multiple model, variables, or archive files to describe a single domain, the current release of WKT supports only one WDT model file, one WDT variables file, and one WDT archive file for describing the domain.\n Model Editor In Code View, the model editor is just to the right of the navigation pane. This editor displays the current model file associated with the WKT Project file. Typing model content into the editor will result in a new model file being added to the project the next time the project is saved.\nThe current release has the following limitations:\n Model files must be in YAML format. Model files must exist directly on the file system and not inside an archive, such as in a ZIP file; any model file inside an archive is ignored by the application.  Variables Editor The WDT variables editor is in the upper right pane of the Code View page. It supports editing any existing name-value pairs, as well as adding or removing name-value pairs.\nTo reference a variable from the model, you must set the value of the desired model file to a variable reference. For example, the model snippet shown here references a variable named httpPort.\ntopology: Name: tododomain ProductionModeEnabled: true Cluster: mycluster: DynamicServers: ServerNamePrefix: Server_ DynamicClusterSize: 10 ServerTemplate: mysrvtemplate ServerTemplate: mysrvtemplate: ListenPort: \u0026#39;@@PROP:httpPort@@\u0026#39; Cluster: mycluster When working with this model file, WebLogic Deploy Tooling expects the httpPort variable to be defined in the model\u0026rsquo;s variables file, as shown here:\nhttpPort = 7001 Archive Editor The WDT archive editor is in the lower right pane of the Code View page. It supports adding content to and removing content from the archive file. While updating content in the archive is not supported directly by the archive editor, the archive editor safely supports multiple operations on the same entry. As such, combining a remove operation followed by the corresponding add operation will effectively replace an entry.\nTo add content to the archive file, use the plus (+) button in the archive editor title bar and follow the prompts to choose the type of content to add and select the corresponding file or directory. For example, to add a WAR file called todo.war to the archive, do the following:\n On the archive editor title bar, click +. In the resulting dialog, choose Application File from the list and click OK. In the resulting file chooser dialog, select the todo.war file and click Select.  This will result in the file structure wlsdeploy/applications/todo.war being added to the archive editor pane. At this point, the application has not created or modified the archive file; it is simply storing the data it needs about the archive path to the added entry and the file path where the content is found. Saving the WKT Project will update the archive to reflect the buffered operations performed in the editor.\nDon\u0026rsquo;t forget to add the application to the model and set its SourcePath attribute to the path in the archive where it can be found, as shown in the following model file snippet.\n appDeployments: Application: todo: SourcePath: wlsdeploy/applications/todo.war ModuleType: war Target: mycluster To remove content from the archive file, select the content to remove in the archive editor pane and click the minus (-) button in the archive editor title bar. Don\u0026rsquo;t forget to remove any reference to this content from the model file.\nValidate Model Validate Model invokes the WDT Validate Model Tool, which validates that the model and its related artifacts are well-formed and provides help on the valid attributes and subfolders for a particular model location. This action is available by using the Validate Model button on the Model page and by selecting Go \u0026gt; Validate Model Files.\nPrepare Model Prepare Model invokes the WDT Prepare Model Tool to modify the model to work in a Kubernetes cluster with WebLogic Kubernetes Operator or Verrazzano installed. This action is available by using the Prepare Model button on the Model and Kubernetes WebLogic Domain pages and by selecting Go \u0026gt; Prepare Model for Kubernetes. It is also possible to run Prepare Model during the Create Image action, though typically it is best to run Prepare Model explicitly, prior to moving to the Image section.\nPrepare Model does the following:\n Removes model sections and fields that are not compatible with the target environment. Replaces endpoint values with model tokens that reference variables. Replaces credential values with model tokens that reference either a field in a Kubernetes secret or a variable. Provides default values for fields displayed in the application\u0026rsquo;s variable, variable overrides, and secret editors. Extracts topology information to the application that it uses to generate the resource file used to deploy the domain.  For more information, see the WDT model tokens documentation.\nIn replacing credential values, Prepare Model must handle the replacement differently for the \u0026ldquo;Domain in Image\u0026rdquo; and \u0026ldquo;Model in Image\u0026rdquo; domain locations:\n  With \u0026ldquo;Domain in Image\u0026rdquo;, the WebLogic Image Tool creates the domain while creating the image. As such, it has no knowledge of Kubernetes so the token replacement uses variable tokens so that domain creation has access to the actual credential values. You must ensure that all variables have valid values prior to running Create Primary Image.\n  For \u0026ldquo;Model in Image\u0026rdquo;, the domain is created at runtime by the WebLogic Kubernetes Operator running in a Kubernetes cluster. As such, token replacement uses secret tokens for all credential fields. You must to be sure to provide values for all secret reference fields using the WebLogic Domain section\u0026rsquo;s Secrets pane so that the required secrets get populated correctly during domain deployment. For more information, see WebLogic Domain.\n  The application tries to preserve any values from the model and variable files that Prepare Model replaces with secret tokens. The current release is limited by the behavior of the underlying WDT Prepare Model Tool in that all passwords are not retained and must be re-entered in the appropriate location.\n "
},
{
	"uri": "https://oracle.github.io/weblogic-toolkit-ui/setup/quickstart/qs-advanced/online-remote-discover/",
	"title": "Online Remote Discover",
	"tags": [],
	"description": "Add Model Using Remote Online Discovery",
	"content": "In WKTUI, go to the Model page and select the Code View tab. Select the File \u0026gt; Add Model \u0026gt; Discover Model (online) menu item. The following dialog box appears. Enter the information shown in the following image, including the Domain Home path $WKTUI_QS_HOME/todolist_domain directory. Make sure to provide the WebLogic user name and password specified when you ran the createToDoListDomain script.\nThis path is used to present the results of what we need to do, as shown in the following image.\nDepending on the version of WDT you are using, online remote discovery adds some fields with their default values that were not actually set in the original model used to build the domain. WDT is continuing to improve discovery so your results may be slightly different than those shown in the following image.\nBecause we want to be able to go back seamlessly to the main flow with your model, you will clean it up a bit, fill in the missing variable values, and add the application to the archive file. Please make the following changes:\n Delete the SSL block under the todo-srv-template. Under todo-srv-template, remove the ListenPort field and replace it with the ListenPortEnabled field set to true. In the JDBCDriverParams block, change localhost to mysql in the URL field. Set the empty variable values using the values specified when you ran the startMySQL and createToDoListDomain scripts.  Now, click the Plus Sign in the archive editor. Choose the Archive Entry Type, Application, and set the Application Archive File to the file at $WKTUI_QS_HOME/app/target/todo.war, as shown in the following image, and then click OK.\nNow, the model should look similar to the one shown in the following image (except that the variable values will match the credentials you chose).\nAt this point, the model is roughly equivalent to the hand-built one shown in the Validate Model Code View. Most of the minor differences will go away after you prepare the model.\nYou can stop any running WebLogic Servers in the local domain, and stop and remove the mysql container. To continue, return to Validate and Prepare the Model.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-toolkit-ui/navigate/kubernetes/k8s-wko/",
	"title": "WebLogic Kubernetes Operator",
	"tags": [],
	"description": "Install the WebLogic Kubernetes Operator in the target Kubernetes cluster.",
	"content": "Contents  WebLogic Kubernetes Operator Design View  WebLogic Kubernetes Operator Image Image Pull Secret Kubernetes Namespace Selection Strategy WebLogic Kubernetes Operator Role Bindings External REST API Access Third Party Integrations Java Logging   Code View Install Operator Update Operator Uninstall Operator  WebLogic Kubernetes Operator This section provides support for installing the WebLogic Kubernetes Operator (the \u0026ldquo;operator\u0026rdquo;) in the target Kubernetes cluster. For detailed information about the operator, see the WebLogic Kubernetes Operator documentation.\nDesign View Design View helps you specify the necessary data needed to install the WebLogic Kubernetes Operator to manage WebLogic domains in one or more Kubernetes namespaces. To install the operator using the default settings, simply provide values for the following three fields:\n Kubernetes Namespace - The Kubernetes namespace to which to install the operator. Kubernetes Service Account - The Kubernetes service account for the operator to use when making Kubernetes API requests. Helm Release Name to Use for Operator Installation - The Helm release name to use to identify this installation.  The WKT UI application overrides a few default values in the operator Helm Chart. Read the details of the parameters descriptions in Kubernetes Namespace Selection Strategy. These panes and their fields are made visible by expanding the Advanced portion of the page.\n WebLogic Kubernetes Operator Image By default, the operator\u0026rsquo;s Image Tag to Use field is set to the image tag corresponding to the latest operator release version on the GitHub Container Registry. The Image Pull Policy field configures the operator deployment in Kubernetes to tell it when to pull the image from the specified registry:\n If Not Present (default) - Only pull the image if it is not already present on the Kubernetes node. Always - Pull the image every time the image is needed to start a container. Never - Never pull the image; this will result in an error if the image is not already present on the Kubernetes node.  Because the GitHub Container Registry does not require image pull authentication to pull the official WebLogic Kubernetes Operator image, Image Pull Requires Authentication is disabled by default. If a custom operator image is being used from a container image registry that requires pull authentication, then enable the option and complete the appropriate fields described in the Image Pull Secret pane that follows.\nImage Pull Secret This pane is hidden unless the Image Pull Requires Authentication from the WebLogic Kubernetes Operator Image pane is enabled. To allow Kubernetes to pull the custom operator image requiring pull authentication, use the Kubernetes Image Pull Secret Name field to provide the name of the Kubernetes secret to use for the credentials. To have the application create this secret, disable Use Existing Secret and provide the values for the following fields:\n Image Pull Secret Email Address - The email address of the user. Image Pull Secret Username - The user name to use when authenticating to the container image registry. Image Pull Secret Password - The user\u0026rsquo;s password to use when authenticating to the container image registry.  The read-only Image Registry Address field is parsed from the Image Tag to Use field. If the Image Registry Address field is empty, then the application will assume that Docker Hub is the target container image registry to use when creating the pull secret.\nKubernetes Namespace Selection Strategy The operator needs to know which WebLogic domains in the Kubernetes cluster that it will manage. It does this at the Kubernetes namespace level, so any WebLogic domain in a Kubernetes namespace the operator is configured to manage, will be managed by the operator instance being installed. Use the Kubernetes Namespace Selection Strategy field to choose the desired namespace selection strategy from one of the supported values:\n Label Selector (default) - Any Kubernetes namespace with a specified label will be managed by this operator. List - Any Kubernetes namespace in the provided list will be managed by this operator. Regular Expression - Any Kubernetes namespace whose name matches the provided regular expression will be managed by this operator. Dedicated - Only the Kubernetes namespace where the operator is installed will be managed by this operator.  Note that the operator Helm chart default is List but the application overrides this to specify Label Selector as the default value.\nEach namespace selection strategy takes different input values; the form fields will change based on the strategy selected:\n When using the Label Selector strategy, the Kubernetes Namespace Label Selector field will appear with a default value that aligns with the Helm chart default value. The Regular Expression strategy uses the required Kubernetes Namespaces Regular Expression field to specify the regular expression to use for matching the Kubernetes namespaces that the operator should manage. Selecting the List strategy will cause the Kubernetes Namespaces to Manage field to appear with a list containing the default namespace; this aligns with the default value in the Helm chart.  Removing the default namespace is fine and will result in an empty list. Note that when deploying the domain with an operator using the List strategy, the application will automatically add the new domain\u0026rsquo;s Kubernetes namespace to the list specified list, if needed. As such, specifying an empty list will not prevent your WebLogic domain from being managed by the operator.   Dedicated is self-defining so no additional fields are necessary.  WebLogic Kubernetes Operator Role Bindings When installing the operator, the operator Helm chart default is to create a Kubernetes Role and a Kubernetes RoleBinding in each Kubernetes namespace being managed by the operator. By enabling Enable Cluster Role Binding, the operator installation will create a Kubernetes ClusterRole and ClusterRoleBinding that the operator will use for all managed namespaces. This ClusterRole and ClusterRoleBinding will be shared across all operator installations in the Kubernetes cluster (assuming that those installations also enable cluster role binding).\nUsing the default namespace-specific roles and role bindings, the administrator follows the Principle of Least Privilege to guarantee that the operator cannot perform any actions on other, non-managed namespaces. The implication of this configuration is that because the operator service account does not have permission to create roles and role bindings, any new namespace added for the operator to manage does not have the necessary role and role binding needed for the operator to manage the namespace. Rerunning the operator Helm chart with the operator configured to manage the new namespaces will cause the Helm chart to create the necessary Role and RoleBinding objects in each namespace, as needed.\nIf the operator is using the ClusterRole and ClusterRoleBinding, then the new namespaces will be automatically picked up by the operator when using either the Label Selector or Regular Expression namespace selection strategy without any need to rerun the operator Helm chart.\nAs previously mentioned, the WKT UI application automatically reruns the operator Helm chart when deploying new WebLogic domains to ensure that the new domain\u0026rsquo;s namespace is being managed by the operator.\nExternal REST API Access By default, the operator\u0026rsquo;s REST API is not exposed outside the Kubernetes cluster. To enable the REST API to be exposed, enable Expose REST API Externally, set the desired HTTPS port using the External REST API HTTPS Port field, and name of the Kubernetes TLS secret to use in the External REST API Identity Secret Name field. For more information, see the WebLogic Kubernetes Operator Rest API documentation.\nThird Party Integrations To enable integration with the Elasticsearch, Logstash, and Kibana (ELK) stack, enable ELK Integration Enabled and provide values for the following fields.\n Logstash Image Tag to Use - The container image of logstash to use. Elasticsearch Host Name - The DNS name of IP address of the Elasticsearch server. Elasticsearch Port - The port number for the Elasticsearch server.  For more information, see Elastic Stack integration in the WebLogic Kubernetes Operator documentation.\nJava Logging This pane lets you override the operator\u0026rsquo;s Java logging configuration, which can be useful when debugging issues with the operator. Use the Logging Level field to customize the minimum log level written to the log file. The Log File Size Limit field sets the maximum size of a single operator log file while the Log File Count limits the maximum number of retained log files. For more information, see Operator Helm configuration values in the WebLogic Kubernetes Operator documentation.\nCode View The WebLogic Operator page\u0026rsquo;s Code View displays a shell script that you can use as a starting point for automating the operator installation process.\nIf it is not already selected, then use the Script Language drop-down menu to choose the desired scripting language. Note that the application is providing a working sample script to show how the process might be automated. Before using the script, review the script and make any changes necessary for your environment. One typical change that would be considered a best practice would be to change the script to accept either command-line arguments or externally set environment variables to specify any credentials required by the script to eliminate hard-coding the credentials in the script itself. This change is left as an exercise for you because different environments typically will have existing standards for securely handling such credentials.\nInstall Operator Install Operator installs the WebLogic Kubernetes Operator in the target Kubernetes cluster. You access this action by using the Install Operator button on the WebLogic Operator page or the Go \u0026gt; Install WebLogic Kubernetes Operator menu item.\nAt a high level, Install Operator performs the following steps:\n Validates the input values necessary for running the action based on your selections. Saves the WKT Project, if needed. Creates the Kubernetes namespace for installing the operator, if needed. Creates the Kubernetes service account for the operator to use, if needed. Creates the operator image pull secret, if needed. Adds the latest operator Helm chart to the local Helm repository. Runs Helm to install the operator using the specified configuration.  Update Operator Update Operator updates the settings on a running WebLogic Kubernetes Operator by using the helm upgrade command. You access this action by using the Update Operator button on the WebLogic Operator page or the Go \u0026gt; Update WebLogic Kubernetes Operator menu item.\nUpdate Operator applies all the changes to the operator that you have specified on the page. For example, you can change the operator image version, the domain namespace selection strategy, Java logging level, or the value of any field in the WebLogic Kubernetes Operator section.\nUninstall Operator Uninstall Operator uses the helm uninstall command to remove the WebLogic Kubernetes Operator and its associated resources from the Kubernetes cluster. In addition, you can choose whether to also delete the corresponding namespace. You access these actions by using the Uninstall Operator button on the WebLogic Operator page or the Go \u0026gt; Uninstall WebLogic Kubernetes Operator menu item.\nNote that if you uninstall an operator, then any domains that it is managing will continue running; however, any changes to a domain resource that was managed by the operator will not be detected or automatically handled, and, if you want to clean up such a domain, then you will need to manually delete all of the domain\u0026rsquo;s resources (domain, pods, services, and such).\n"
},
{
	"uri": "https://oracle.github.io/weblogic-toolkit-ui/setup/",
	"title": "Get Started",
	"tags": [],
	"description": "",
	"content": "  Prerequisites  Install the prerequisite requirements.\n Install WKT UI  Install the WKT UI application and check for updates.\n Quick Start Guide  Use the Quick Start guide to exercise WKT UI functionality and deploy a sample application.\n "
},
{
	"uri": "https://oracle.github.io/weblogic-toolkit-ui/navigate/verrazzano/vz-component/",
	"title": "Component",
	"tags": [],
	"description": "Create and deploy the Verrazzano component for the WebLogic domain.",
	"content": "Contents  Verrazzano Component Design View  Primary Image to Use for the Domain Auxiliary Image to Use for the Domain Clusters Model Variables Overrides Secrets Runtime Encryption Secret WebLogic Kubernetes Operator Introspection Configuration Domain-Wide Server Settings Domain-Wide Node Selector   Code View Prepare Model Deploy Component Undeploy Component  Verrazzano Component The Component section provides support for creating and deploying the Verrazzano component for the WebLogic domain.\nDesign View Design View helps you specify the data needed to generate the component definition and deploy that resource into a Kubernetes cluster. It provides values for various Kubernetes objects, including model variable overrides and secrets.\nVerrazzano Version- The three digit version number of the installed Verrazzano version from the target environment.\nThe Domain UID field defines the name of the Kubernetes Domain custom resource object. This name must be unique within the Kubernetes namespace where it will be created, which is controlled by the Kubernetes Namespace field.\nThe default value of the Domain UID field is based on the WebLogic domain\u0026rsquo;s name, as defined by the WDT model:\n When using either \u0026ldquo;Model in Image\u0026rdquo; or \u0026ldquo;Domain in Image\u0026rdquo; domain location, the Domain Home Path field is read-only and its value is set using the Domain Home Directory field under Advanced. When using \u0026ldquo;Domain in PV\u0026rdquo;, this field must be set to the fully qualified path to the domain home directory in the persistent volume. For example, if the persistent volume mount path is set to /shared and the domain home is located in /domains/mydomain in the persistent volume, then the Domain Home Path field must be set to /shared/domains/mydomain.  For \u0026ldquo;Model in Image\u0026rdquo;, use the Domain Type field to specify the type of domain to create using the model.\nSet the Kubernetes secret name where the WebLogic domain credentials will be stored using the WebLogic Credentials Secret Name field. Set the value of the WebLogic Server administration credentials using the WebLogic Admin Username and WebLogic Admin Password fields. Remember that these fields must be set appropriately for the selected domain location:\n For \u0026ldquo;Model in Image\u0026rdquo;, these fields are used to set the WebLogic Server credentials used to create the domain, and by the operator at runtime to perform actions on the domain (for example, start a server). For \u0026ldquo;Domain in Image\u0026rdquo;, the domain was created using the WebLogic Image Tool using the credentials specified in the model. These values must match the ones used during the image creation process. For \u0026ldquo;Domain in PV\u0026rdquo;, the domain was created outside the application so the values provided in these fields must match the ones used when the domain was created.  When using \u0026ldquo;Domain in PV\u0026rdquo;, three additional fields associated with the persistent volume will be shown:\n Persistent Volume Name - The name of the persistent volume to use in the Domain resource file. Persistent Volume Claim Name - The persistent volume claim to associate with the persistent volume. Persistent Volume Mount Path - The path to the persistent volume within the container(s). Enable Log Home - Enables the ability to separate the logs directory from the domain directory on the persistent volume. Log Home Path - The path to use for the log home when Enable Log Home is enabled.  The following sections describe the other panes that support configuring the generated Domain resource; they are:\n Primary Image to Use for the Domain Auxiliary Image to Use for the Domain Clusters Model Variables Overrides Secrets Runtime Encryption Secret WebLogic Kubernetes Operator Introspection Configuration Domain-Wide Server Settings Domain-Wide Node Selector  Primary Image to Use for the Domain This pane focuses on the container primary image to use to run the WebLogic Server domain in a container. If you select Create a New Primary Image, then click Go To Create Primary Image Page to configure the image. For detailed information, see the Image section.\n When using either \u0026ldquo;Model in Image\u0026rdquo; or \u0026ldquo;Domain in Image\u0026rdquo; domain location, the Primary Image Tag field is read-only; its value is set using the Image Tag field in the Image section. In the case of \u0026ldquo;Domain in PV\u0026rdquo;, the Image Tag field is not read-only and is the place to specify the image to use to run the WebLogic domain\u0026rsquo;s containers. The read-only Image Registry Address field is populated by parsing the value of the Image Tag field to extract any container image registry address. If the tag has no image registry address, then it is assumed to reside on Docker Hub.  Use the Primary Image Pull Policy field to specify when Kubernetes should pull the image from the specified image registry. The choices are:\n If Not Present (default) - Only pull the image if it is not already present on the Kubernetes node. Always - Pull the image every time the image is needed to start a container. Never - Never pull the image; this will result in an error if the image is not already present on the Kubernetes node.  If pulling the image from the specified image registry does not require authentication, then Specify Image Pull Credentials should be disabled. When enabled, use the Use Existing Image Pull Secret field to tell the application whether to use an existing image pull secret or create a new one. Specify the image pull secret name in the Image Pull Secret Name field. When creating a new secret, specify the secret data using the Image Registry Pull Username, Image Registry Pull Email Address, and Image Registry Pull Password fields.\nAuxiliary Image to Use for the Domain Under Auxiliary Image Configuration, use the radio buttons to specify whether or not to use an Auxiliary Image (an existing one) or create a new one (the default). If you select Create a New Auxiliary Image, then click Go To Create Auxiliary Image Page to configure the image. For detailed information, see the Image section.\nFor \u0026ldquo;Model in Image\u0026rdquo; domains only, this pane focuses on the container auxiliary image to use for the domain.\n  The Auxiliary Image Tag field is read-only; its value is set using the Auxiliary Image Tag field in the Auxiliary Image page of the Image section.\n  Use the Auxiliary Image Pull Policy field to specify when to pull the domain\u0026rsquo;s auxiliary image from the image registry. The choices are:\n If Not Present (default) - Only pull the image if it is not already present. Always - Pull the image every time the image is needed to start a container. Never - Never pull the image; this will result in an error if the image is not already present.    If pulling the image from the specified image registry does not require authentication, then Specify Auxiliary Image Pull Credentials should be disabled. When enabled, use the Use Existing Auxiliary Image Pull Secret field to tell the application whether to use an existing image pull secret or create a new one. Specify the image pull secret name in the Auxiliary Image Pull Secret Name field. When creating a new secret, specify the secret data using the Auxiliary Image Registry Pull Username, Auxiliary Image Registry Pull Email Address, and Auxiliary Image Registry Pull Password fields.\nClusters The Clusters pane lists the names of each cluster in the model and lets you adjust the WebLogic Server startup configuration and Kubernetes resource requests and limits. It is currently populated when Prepare Model is run, which means that projects using \u0026ldquo;Domain in PV\u0026rdquo; will not have access to adjust the configuration at the cluster level. \u0026ldquo;Domain in PV\u0026rdquo; projects can still use the Domain-Wide Server Settings pane under Advanced.\nTo view or edit the settings for a cluster, select the edit icon at the right end of the cluster\u0026rsquo;s row in the table. This opens a dialog that shows all the cluster-related fields and their values. The read-only Cluster Name field shows the name of the cluster, as specified in the underlying model.\nUse the Replicas field to adjust the number of managed servers that the WebLogic Kubernetes Operator should start when the domain is deployed. The default value for the Replicas field is set based on the maximum number of servers specified by the model:\n In the case of a static cluster, it will be the number of servers that are configured to be part of the cluster. When using a dynamic cluster, the value is set based on the maximum number of servers that the dynamic cluster allows. This default value also serves as the upper limit for the Replicas field. In other words, you may only reduce the number of replicas. It is not possible to increase the replica count above the maximum limit defined by the model.  Use the Minimum Heap Size and Maximum Heap Size fields to control the amount of Java heap space available for each server in the cluster. Specify any additional Java command-line options with the Additional Java Options field.\nDisable debug logging to standard out disables WebLogic Server debug log messages from being written to standard out. In WebLogic Server 12.2.1.3.0, there is an issue that impacts the Oracle JDBC driver processing FAN (Fast Application Notification) events from an Oracle Database. To work around this issue, enable Disable Oracle JDBC Support for FAN Events.\nUse pseudo-random number generator controls whether WebLogic Server uses the pseudo-random number generator (that is, /dev/urandom) or the regular random number generator (that is, /dev/random). Because the latter is impacted by the available entropy, it can negatively impact performance when running WebLogic Server on a virtual machine or in a container. Because the servers being configured by this application will always be running in a container, the default is set to use the pseudo-random number generator.\nThe Kubernetes resource requests and limits values help the Kubernetes scheduler determine which node to use to start a container (to ensure there are sufficient resources available for the container to run). The following fields allow these values to be specified:\n Kubernetes CPU Request - The requested amount of CPU for each managed server\u0026rsquo;s container. Kubernetes CPU Limit - The maximum amount of CPU each managed server\u0026rsquo;s container is allowed to use. Kubernetes Memory Request - The requested amount of memory for each managed server\u0026rsquo;s container. Kubernetes Memory Limit - The maximum amount of memory each managed server\u0026rsquo;s container is allowed to use.  For more information about these fields and setting their values, see the Kubernetes documentation.\nModel Variables Overrides Use this pane to override values of model variables when using \u0026ldquo;Model in Image\u0026rdquo; to customize the model data already set in the image. For example, the image may contain a variable whose value refers to a JDBC URL to connect to a database. Because the image may be used across development, test, and production environments, overriding the JDBC URL to point to the correct database for the environment helps make the same image usable across all three environments. All override values are added to a Kubernetes ConfigMap that is passed to the WebLogic Kubernetes Operator so that it creates the underlying WebLogic Server domain with the correct values for the environment.\nIf the model has one or more variables, then the Kubernetes Config Map Name field is visible and allows the name of the Kubernetes ConfigMap name to be controlled. The table will be populated with the model variables, as defined by the model variables file. Because the model variables file is typically already set in the image by the time you reach this page, both the Model Variable Name and the Model Variable File Value entries are read-only. Enter an Model Variable Override Value for any variable whose Model Variable File Value should be overridden. Note that the ConfigMap will only be created if one or more variables have an override value specified.\nSecrets When using \u0026ldquo;Model in Image\u0026rdquo;, use this pane to set the value of any secrets referenced in the model (other than the WebLogic administrator credentials secret). The secrets that appear in the table are pulled from the model file directly; as such, the Secret Name field is read-only. Set the appropriate Username and Password field values for each secret in the table. These values are required and will be used to create or update the secret with the specified values.\nRuntime Encryption Secret When using \u0026ldquo;Model in Image\u0026rdquo;, the WebLogic Kubernetes Operator requires a runtime encryption secret it uses to encrypt sensitive WebLogic Server domain data stored in Kubernetes. For more information, see Required runtime encryption secret in the WebLogic Kubernetes Operator documentation.\nUse the Runtime Encryption Secret Name field to control the name of the secret, if needed. Typically, the default name is sufficient. The Runtime Encryption Secret Value field\u0026rsquo;s default value is generated but may be changed, if desired.\nWebLogic Kubernetes Operator Introspection Configuration This pane controls the WebLogic Kubernetes Operator introspection job configuration. Use the Introspection Job Active Deadline Seconds field to control how long the operator waits for the introspection job to complete. The application sets the default to 900 seconds (15 minutes); this overrides the underlying default of 120 seconds (2 minutes) built into the operator. As such, clearing the value of this field will cause the effective value to be set to 120 seconds.\nDomain-Wide Server Settings This pane lets you adjust the WebLogic Server startup configuration and Kubernetes resource requests and limits default values for every WebLogic Server container in the WebLogic Server domain. Any fields set here will be applied only if they are not overridden elsewhere. For example, setting the Minimum Heap Size will set WebLogic Server\u0026rsquo;s minimum heap size to the specified value only if the cluster to which the server belongs does not override the minimum heap size. For typical domains with an Administration Server and one or more clusters, the best practice is to use this section to configure the Administration Server and use the Clusters pane to configure each cluster explicitly.\nThe fields in this pane have similar meaning to the equivalent fields previously described in Clusters; refer to that section for more information.\nDomain-Wide Node Selector This pane lets you specify the nodes on which to run.\nCode View Code View displays a shell script for deploying the Verrazzano components for this WebLogic domain into Kubernetes and creating its dependent resources as well as the Component Resource YAML definition and the Model Variables Overrides ConfigMap, if applicable.\nIf it is not already selected, then use the Script Language drop-down menu to choose the desired scripting language. Note that the application is providing a working sample script simply to show how the process might be automated. Before using the script, review the script and make any changes necessary for your environment. One typical change that would be considered a best practice would be to change the script to accept either command-line arguments or externally set environment variables to specify any credentials required by the script to eliminate hard-coding the credentials in the script itself. This change is left as an exercise for you because different environments typically will have existing standards for securely handling such credentials.\nPrepare Model Prepare Model is the same as was previously described in the Model section. It is only surfaced here because the Clusters pane of the Design View is populated only when Prepare Model is run.\nDeploy Component Deploy Component creates the domain custom object and any of its dependent objects (for example, namespace, secrets, ConfigMap) in Kubernetes. You access this action by using the Deploy Component button or the Go \u0026gt; Deploy Verrazzano Component menu item.\nUndeploy Component Undeploy Component removes the domain custom object for the WebLogic domain and its dependent objects in Kubernetes. Undeploying the Verrazzano component will make any Verrazzano applications referencing these components invalid. In addition, you can choose whether to also delete the corresponding namespace. Removing the Verrazzano components' namespace removes all applications, components, secrets, ConfigMaps, and other Kubernetes objects that exist in the Kubernetes namespace. You access these actions by using the Undeploy Component button or the Go \u0026gt; Undeploy Verrazzano Component menu item.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-toolkit-ui/setup/quickstart/qs-kubernetes/k8s-weblogic-domain/",
	"title": "Deploy the Domain",
	"tags": [],
	"description": "Create and deploy the Kubernetes custom resource for the WebLogic domain.",
	"content": "To inform the operator of a new WebLogic or FMW domain, you must create an operator Domain resource object in Kubernetes. Starting in WKO 4.0.0, the operator also needs an operator Cluster resource object for every cluster in the domain. This separation is required to work with the Kubernetes Horizontal Pod Autoscaler (HPA) to allow it to automatically scale clusters based on load (but only up to the maximum size of the WebLogic cluster). For more information, see this WebLogic Kubernetes Operator Scaling documentation.\nWKTUI generated the required operator resource objects for your domain because of the project settings. Go to the Kubernetes \u0026gt; WebLogic Domain page. Fill in the form fields, as described in the following table. Don’t worry about the Image Pull Secret value ocr and the fact that it does not exist. You will create that secret before deploying the domain.\n   Field Name Value     WebLogic Admin Username Enter the username that you want to use.   WebLogic Admin Password Enter the password that you want to use.   WebLogic Kubernetes Operator Installed Version If this field is not already populated, press the icon in the text box.   Primary Image Tag container-registry.oracle.com/middleware/weblogic:14.1.1.0-11-ol8 or container-registry.oracle.com/middleware/weblogic_cpu:14.1.1.0-generic-jdk11-ol8   Specify Image Pull Credentials ON   Use Existing Image Pull Secret ON   Image Pull Secret Name ocr   Specify Auxiliary Image Pull Credentials ON   Use Existing Auxiliary Image Pull Secret OFF   Auxiliary Image Pull Secret Name ocir   Auxiliary Image Registry Pull Username \u0026lt;tenancy-name\u0026gt;/\u0026lt;oracle-cloud-username\u0026gt; or user name for your image registry.   Auxiliary Image Registry Pull Email Address Your email address.   Auxiliary Image Registry Pull Password \u0026lt;oracle-cloud-auth-token\u0026gt; or password for your image registry.    After you filled out the fields in the preceding table, you need to look at some additional fields contained in tables, shown in the following image.\n First, look at the Clusters table. As you can see, the cluster from your model has been added to this table (by the earlier invocation of the Prepare Model action). If you do not see the cluster, run Prepare Model again to populate the table. Notice that the Replicas value for the cluster is set to the maximum size of the cluster, as specified in the model. Select the Pencil icon toward the right end of the row. Notice that you cannot set the Replicas value higher than 10. After you are done, change the value to 2 and click OK. Next, look at the Model Variables Overrides section. This section lets you override the values specified in the variables model file in the auxiliary image using a Kubernetes ConfigMap. Because you do not need to override these values, you can move on to the Secrets section.  The Secrets section contains all model-defined secrets and lets you specify the user name and password. In the preceding image, notice that the secret associated with your MySQL database connection is already populated. This value was removed from the model (or the variable reference) by the Prepare Model action and added here. If you run Prepare Model more than once, you will lose this value and must enter it manually. WDT generally will not populate password values, so you need to enter your MySQL database password you provided when you ran Quick Start scripts/wkoDeployMySQL script.\nBefore you deploy the domain, you must deploy the MySQL database. You will deploy the database to the same namespace as the domain, so you need to create the following Kubernetes objects to deploy the database:\n todolist-domain-ns Namespace – The Kubernetes namespace where both the WebLogic or FMW domain and MySQL database will reside. ocr Secret – The Kubernetes image pull secret for pulling images from the Oracle Container Registry. mysql Secret – The Kubernetes secret that holds the root password, user name, and password of the user the ToDo List application uses to connect to the database. todolist-mysql-cm ConfigMap – The Kubernetes ConfigMap used to hold the init-schema.sql script to initialize the MySQL database on startup. todolist-mysql-deployment Deployment – The Kubernetes deployment that will start and manage the MySQL database. mysql Service – The Kubernetes service that exposes the MySQL database by the mysql DNS name to the WebLogic managed servers.  To make this easier, go to the QuickStart directory and do the following:\n Edit the demarcated section of the setQuickstartEnv shell script to match your environment. Source (macOS or Linux) or run the setQuickstartEnv shell script. Change to the scripts subdirectory and run the wkoDeployMySQL script, which creates the Kubernetes objects described previously to start the MySQL database.  Now that the MySQL database is running at the hostname mysql (inside the namespace), click Deploy Domain. This action takes some time to run. Even after the action finishes, you need to wait a few minutes for the operator to introspect the domain and start the servers. Use Get Domain Status to verify that the domain is up, and all servers are running, as shown in the following image.\nAfter your domain is ready, move onto the next section.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-toolkit-ui/setup/quickstart/qs-verrazzano/vz-component/",
	"title": "Deploy the Verrazzano Component for the WebLogic Domain",
	"tags": [],
	"description": "Create and deploy the Verrazzano component for the WebLogic domain.",
	"content": "Verrazzano installation includes the WebLogic Kubernetes Operator. To inform the operator about a new WebLogic or FMW domain, you need to create a Verrazzano component that includes an operator Domain resource object in Kubernetes. Starting in Verrazzano 1.5.0, the Verrazzano component also needs an operator Cluster resource object for every cluster in the domain. This separation is required to work with the Kubernetes Horizontal Pod Autoscaler (HPA) to allow it to automatically scale the clusters based on load (but only up to the maximum size of the WebLogic cluster). For more information, see this WebLogic Kubernetes Operator Scaling documentation.\nWKTUI generates the required Verrazzano Component objects for your domain because of the project settings. Go to the Verrazzano \u0026gt; Component page. Fill in the form fields, as described in the following table. Don’t worry about the Image Pull Secret value ocr and the fact that it does not exist. You will create that secret before deploying the domain.\n   Field Name Value     Verrazzano Version If not already populated, use the button inside the field to get the installed version from the Kubernetes cluster.   WebLogic Admin Username Enter the username that you want to use.   WebLogic Admin Password Enter the password that you want to use.   WebLogic Kubernetes Operator Installed Version If this field is not already populated, press the icon in the text box.   Primary Image Tag container-registry.oracle.com/middleware/weblogic:14.1.1.0-11-ol8 or container-registry.oracle.com/middleware/weblogic_cpu:14.1.1.0-generic-jdk11-ol8   Specify Image Pull Credentials ON   Use Existing Image Pull Secret ON   Image Pull Secret Name ocr   Specify Auxiliary Image Pull Credentials ON   Use Existing Auxiliary Image Pull Secret OFF   Auxiliary Image Pull Secret Name ocir   Auxiliary Image Registry Pull Username \u0026lt;tenancy-name\u0026gt;/\u0026lt;oracle-cloud-username\u0026gt; or user name for your image registry.   Auxiliary Image Registry Pull Email Address Your email address.   Auxiliary Image Registry Pull Password \u0026lt;oracle-cloud-auth-token\u0026gt; or password for your image registry.    After you have filled out the fields in the preceding table, you need to look at some additional fields contained in tables, shown in the following image.\n First, look at the Clusters table. As you can see, the cluster from your model has been added to this table (by the earlier invocation of the Prepare Model action). If you do not see the cluster, run Prepare Model again to populate the table. Notice that the Replicas value for the cluster is set to the maximum size of the cluster, as specified in the model. Select the Pencil icon toward the right end of the row. Notice that you cannot set the Replicas value higher than 10. After you are done, change the value to 2 and click OK. Next, look at the Model Variables Overrides section. This section lets you override the values specified in the variables model file in the auxiliary image using a Kubernetes ConfigMap. Because you do not need to override these values, you can move on to the Secrets section.  The Secrets section contains all model-defined secrets and lets you specify the user name and password. In the preceding image, notice that the secret associated with your MySQL database connection is already populated. This value was removed from the model (or the variable reference) by the Prepare Model action and added here. If you run Prepare Model more than once, you will lose this value and must enter it manually. WDT generally will not populate password values, so you need to enter your MySQL database password that you plan to provide when you run Quick Start scripts/vzDeployMySQL script later in this section.\nBefore you deploy your component, switch to the Code View tab and select the Component Resource sub-tab. Notice that your component contains a workload object, VerrazzanoWebLogicWorkload. This object contains the WebLogic Kubernetes Operator Domain and Cluster custom resources for your domain. You also have a ConfigMap Resource sub-tab. This is the Kubernetes ConfigMap where any Model Variable Override values are stored. Because we did not override any of the model variables’ values, the todolist-domain-overrides.properties element is empty.\nClick Deploy Component. Remember, deploying a Verrazzano component simply creates the component object in Kubernetes, which does not cause the WebLogic domain to be instantiated. That happens after a Verrazzano application (also known as the Application Configuration) object is deployed.\nBefore turning your attention to creating the Verrazzano application object, you need to create the Verrazzano component for your MySQL database. You will deploy the database to the same namespace as the domain, so you need to create the following Kubernetes objects to deploy the database:\n todolist-domain-ns Namespace – The Kubernetes namespace where both the WebLogic or FMW domain and MySQL database will reside. ocr Secret – The Kubernetes image pull secret for pulling images from the Oracle Container Registry. mysql Secret – The Kubernetes secret that holds the root password, user name, and password of the user the ToDo List application uses to connect to the database. todolist-mysql-cm ConfigMap – The Kubernetes ConfigMap used to hold the init-schema.sql script to initialize the MySQL database on startup. todolist-mysql-deployment Deployment – The Kubernetes deployment that will start and manage the MySQL database. mysql Service – The Kubernetes service that exposes the MySQL database by the mysql DNS name to the WebLogic managed servers.  To make this easier, go to the QuickStart directory and do the following:\n Edit the demarcated section of the setQuickstartEnv shell script to match your environment. Source (macOS or Linux) or run the setQuickstartEnv shell script. Change to the scripts subdirectory and run the vzDeployMySQL script, which creates the Kubernetes objects and Verrazzano components described previously.  Now that the MySQL database components are deployed, you are ready to create the Verrazzano application, which is covered in the next section.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-toolkit-ui/navigate/image/",
	"title": "Image",
	"tags": [],
	"description": "",
	"content": "Contents  Image Design View  Target Image Name and Registry Credentials Base Image to Use Installers for Building the Image Patch Oracle Home WebLogic Deploy Tooling Configuration Image Build Configuration   Code View Create Images Push Images  Image The Image section helps you build container images for deploying WebLogic-based applications in a Kubernetes environment using the WebLogic Image Tool.\nDesign View Design View helps you specify the necessary data needed to run the WebLogic Image Tool to build an image for running the WebLogic domain.\nUse the Design View page to specify whether to create a new or use an existing (the default) Primary Image and whether or not (the default) to use an Auxiliary Image (an existing one or create a new one). Note that auxiliary images are available for the \u0026ldquo;Model in Image\u0026rdquo; domain location only.\n Primary Image - The image containing the Oracle Fusion Middleware software. It is used as the basis of all containers that run WebLogic Servers for the domain. Auxiliary Image - The image that supplies the WebLogic Deploy Tooling software and the model files. At runtime, the auxiliary image\u0026rsquo;s content is merged with the primary image\u0026rsquo;s content.     The primary image is the one used for running the domain and the auxiliary image contains the data that defines the domain. One primary image can be reused for hundreds of domains whereas an auxiliary image is domain-specific. When using auxiliary images, the primary image contains the OS, JDK, and FMW software installations; the auxiliary image supplies the specifics for a single domain.\nIf you select to create a new primary image, you\u0026rsquo;ll see the following basic panes and a few advanced panes on the Primary Image Design View page. If you select to create a new auxiliary image, you must select the Auxiliary Image Design View page, to configure it. Note that not all the fields described in the following sections for the Primary Image, are relevant for an Auxiliary Image. The exceptions are noted.\n Target Image Name and Registry Credentials Base Image to Use Installers for Building the Image Patch Oracle Home WebLogic Deploy Tooling Configuration Image Build Configuration  Target Image Name and Registry Credentials The most important field in this pane is the Image Tag field. This is the name to give to the newly created image, which must conform to the image naming standards. Because most Kubernetes environments will need to pull the image from a container image registry (for example, Docker Hub), the newly-created image typically will need to be pushed to the appropriate container image registry. Most registries will require authentication as a user with the necessary permissions to push images. As described in the image naming standards, the Image Tag field typically must include the DNS name of the container image registry prior to the first slash (/) character. Images not containing a container image registry DNS name are assumed to be using Docker Hub.\nAfter the Image Tag field is populated, the application detects the presence of any prepended DNS name and displays the value in the Image Registry Address field. This field is read-only so the only way to change the DNS name is to change the value of the Image Tag field. The Image Registry Push Username and Image Registry Push Password fields let you provide the user credentials needed to log in to the container image registry prior to pushing the newly-created image. If explicit authentication is not required, then disable the Specify Image Push Credentials option. If Specify Image Push Credentials is enabled, then any attempts to push the image will fail unless the Image Registry Push Username and Image Registry Push Password fields are specified.\nBase Image to Use By default, the WebLogic Image Tool uses an Oracle Linux base image when building the new image. To specify a different base image, enable Use Custom Base Image and provide the base image\u0026rsquo;s tag in the Custom Base Image to Use field. Any container image registry address found in the base image tag will be displayed in the read-only Base Image Registry Address field. If pulling the base image requires authentication, then enable Custom Base Image Pull Requires Login and provide the necessary credentials in the Custom Base Image Pull Username and Custom Base Image Pull Password fields.\nWhen using a custom base image, the application requires the image to be inspected using the WebLogic Image Tool\u0026rsquo;s Inspect Image command. Note: This action is relevant for Primary Images only. To invoke this inspection, click Inspect Custom Base Image. This inspection tells the application if Java or the Oracle Fusion Middleware software is already installed in the image. If it finds either of these software packages installed, then fields in the Installers for Building the Image pane will disappear because they are unneeded.\nIn the current release, the Patch Oracle Home pane will disappear if the base image contains an Oracle Fusion Middleware installation. The rationale being that the act of patching a base image installation will bloat the size of the image. As such, it is better to either create the base image with the latest patches already installed or allow the WebLogic Image Tool\u0026rsquo;s multistage build to install and patch the Oracle Fusion Middleware installation while minimizing the resulting image size.\nInstallers for Building the Image This pane will contain form fields for up to three installers (depending on the base image being used); they are:\n JDK Installer (Primary Images only) Oracle Fusion Middleware Installer (Primary Images only) WebLogic Deploy Tooling Installer  When specifying the JDK Installer, it is important to remember that this installer will be used to install the JDK inside the Linux x64 image being created. Therefore, the Linux JDK Installer to Use field should always point to the Linux x64 compressed archive installer (for example, jdk-8u291-linux-x64.tar.gz). While the value of the JDK Version field is just a tag associated with the installer used to specify which version of the JDK installer that the WebLogic Image Tool should use, the best practice is to set the value to the real version number (for example, 8u291 or 1.8.0_291).\nThe Oracle Fusion Middleware Installer to Use field must point to an installer that includes a modern version of WebLogic Server (12.2.1.3 or later). Use the Oracle Fusion Middleware Installer Type field to tell the WebLogic Image Tool which installer you are providing. It is important to make sure the type and installer match because installers of different types require different fields to be specified during installation. As with the JDK Version field mentioned previously, the Oracle Fusion Middleware Version field is just a tag to associate with the installer but the best practice is to set the value to the actual Oracle Fusion Middleware version number (for example, 12.2.1.4.0).\nBy default, Download and Use Latest WebLogic Deploy Tooling Installer is enabled so that the application will automatically download and use the latest, generally-available release in the WebLogic Deploy Tooling GitHub repository. To specify a different installer, disable Download and Use Latest WebLogic Deploy Tooling Installer and fill out the WebLogic Deploy Tooling Installer to Use and WebLogic Deploy Tooling Version fields appropriately. As with the other installers' version number fields, the best practice it to use the actual WebLogic Deploy Tooling version number (for example, 1.9.17). Note that new WDT versions often contain bug fixes or enhancements required to work with the latest capabilities, many of which are exposed by this application. As such, using the latest version is strongly recommended.\nFor \u0026ldquo;Model in Image\u0026rdquo; or \u0026ldquo;Domain in Image\u0026rdquo; domain locations, when building your primary or auxiliary image, Oracle strongly recommends using WDT 2.0. Certain WKT UI actions, such as Prepare Model, may rewrite the model into a format that earlier WDT versions cannot parse.\n Patch Oracle Home NOTE: This pane is relevant for Primary Images only. Oracle strongly recommends patching all Oracle Fusion Middleware installations with the latest Patch Set Updates (PSUs) and other recommended patches to ensure that the latest security fixes are applied. This pane configures the WebLogic Image Tool to apply the specified patches to the Oracle Home during the image creation process. There are two mechanisms for specifying that patches should be applied:\n Radio buttons to specify what patch bundles should be applied. The list of patch numbers to apply.  The patch bundle radio buttons provide three choices:\n None - Applies no bundle patches. Apply Latest PSU Only - Applies the latest PSU patch but no other recommended patches. Apply All Recommended Patches - Applies all recommended patches, which always includes the latest PSU, in addition to other important fixes.  Use the Individual Patches to Apply field to specify individual patch numbers to apply. These patches will be applied after any patch bundles specified.\nThe WKT UI application requires that valid Oracle Support credentials be specified using the Oracle Support Username and Oracle Support Password fields. This allows the WebLogic Image Tool to automatically discover the latest PSU and recommended patches and download any patches specified as part of the image creation process.\nAs a last resort, if no valid Oracle Support credentials are available, the patching process can be skipped by disabling the Apply Patches option. To make sure your WebLogic-based applications are as secure as possible, this really should be a last resort.\nWebLogic Deploy Tooling Configuration This Advanced pane applies only to images using either the \u0026ldquo;Model in Image\u0026rdquo; or \u0026ldquo;Domain in Image\u0026rdquo; domain locations.\nFor \u0026ldquo;Domain in Image\u0026rdquo; only, the Domain Type field tells WebLogic Deploy Tooling what type of domain to create. Use the Domain Home Directory to change the location of the WebLogic domain directory inside the container. For \u0026ldquo;Model in Image\u0026rdquo; and \u0026ldquo;Domain in Image\u0026rdquo;, the Model Home Directory field specifies the directory where the WDT model files are stored in the image and WDT Home Directory specifies the WDT home directory inside the image. Typically, there is no need to override these directory locations because the application defaults follow the recommended best practices.\nImage Build Configuration This Advanced pane supports altering the default behavior of the WebLogic Image Tool, as well as extending the image build process to include custom build steps that might be required by particular applications or environments.\nThe JDK/FMW Installation Owner and JDK/FMW Installation Group fields specify the Linux user and group that should own the JDK and Oracle Fusion Middleware installation directories. The default values are generally fine for most environments.\nFor any images intended to run in an OpenShift environment, where the configured Security Context Constraints cause the containers to run as a random user in the root group, select Make Image Compatible with OpenShift. This option changes the default group name to root and gives the group file system write access, as required by OpenShift. For more information, see Managing security context constraints in the OpenShift documentation.\nIf the base image is expected to change without the image tag changing, then enable Always Pull Base Image. With this option enabled, the image build process will always pull a new version of the base image to ensure that the latest version is being used. Otherwise, the base image will be pulled only if it doesn\u0026rsquo;t already exist in the local machine\u0026rsquo;s image cache.\nThe Image Build Network Name field allows an image build to run when the build process needs access to another container, such as a database that might be running in a container that is needed while WDT is creating the domain. Because the current release doesn\u0026rsquo;t support creating JRF domains during the image build process (that is, for the \u0026ldquo;Domain in Image\u0026rdquo; domain location), it is unlikely that this field will be needed. However, it is surfaced for completeness.\nTo add custom steps to the image build process, enable Extend Image Build and provide the Dockerfile containing the additional commands in the Additional Build Commands File field. If the specified Dockerfile needs additional files to be present in the build context directory, then provide the list of those required files in the Additional Build Files field.\nCode View For the Primary Image, the Code View displays a shell script that you can use as a starting point for automating the image creation process. For the \u0026ldquo;Model in Image\u0026rdquo; domain location, there is a similar Code View page for the Auxiliary Image. Each page shows the script for creating and pushing its image.\nIf it is not already selected, then use the Script Language drop-down menu to choose the desired scripting language. Note that the application is providing a working sample script simply to show how the process might be automated. Before using the script, review the script and make any changes necessary for your environment. One typical change that would be considered a best practice would be to change the script to accept either command-line arguments or externally set environment variables to specify any credentials required by the script to eliminate hard-coding the credentials in the script itself. This change is left as an exercise for you because different environments typically will have existing standards for securely handling such credentials.\nCreate Images Create Primary Image and Create Auxiliary Image invoke the WebLogic Image Tool to create a new container image for running a WebLogic domain in a Kubernetes environment. You access these actions using the Create Primary Image or Create Auxiliary Image button on the Image page or from the Go menu.\nAt a high level, the action performs the following steps:\n Validates the input values necessary for running the action based on your selections. Saves the WKT Project, if needed. Adds the installers to the WIT cache on the local machine using the WebLogic Image Tool Cache command. Builds the image on the local machine using the WebLogic Image Tool Create command.  Push Images Push Primary Image and Push Auxiliary Image use the specified Image Builder program to upload (that is, push) the newly-built image to the image registry specified by its image tag. You access these actions by using the Push Primary Image or Push Auxiliary Image button on the Image page or from the Go menu.\nAt a high level, the action performs the following steps:\n Validates the input values necessary for running the action based on your selections. This includes making sure that an image with the specified Image Tag value exists in the local machine\u0026rsquo;s image cache. Saves the WKT Project, if needed. Logs in to the container image registry, if specified. Pushes the image to the container image registry.  "
},
{
	"uri": "https://oracle.github.io/weblogic-toolkit-ui/setup/install/",
	"title": "Install WKT UI",
	"tags": [],
	"description": "Install the WKT UI application and check for updates.",
	"content": " Download the latest WebLogic Kubernetes Toolkit UI (WKT UI) application installers from the GitHub Releases section of this repository. Simply run the appropriate installer for your operating system.  Each release has many assets, some of which are needed for the application’s auto-update functionality and are not intended to be used for installing the application. The following table lists the installer file names and their purpose.\n   Installer File Name Purpose     WebLogic-Kubernetes-Toolkit-UI-1.4.1-arm64.dmg macOS Apple Silicon (M1) installer.   WebLogic-Kubernetes-Toolkit-UI-1.4.1.AppImage Linux AppImage package of the application.   WebLogic-Kubernetes-Toolkit-UI-1.4.1.dmg macOS Intel (x86-64) installer.   WebLogic-Kubernetes-Toolkit-UI-Setup-1.4.1.exe Windows installer.   wktui-1.4.1.x86_64.rpm Linux RPM package installer.   wktui_1.4.1_amd64.deb Linux DEB package installer.    The Linux AppImage package is not an installer. It is a portable packaging of the application that can run directly without installation on a compatible Linux machine. For more information, see https://appimage.org/.\nNOTE: On Linux, to get all the dependencies and have them installed in the correct order, you need to use the package manager to install the rpm or deb file. First, be sure to review the Linux prerequisites here.\n  For RPM-based systems, use either yum or dnf; for example:\nyum update sudo yum -y localinstall wktui_1.0.0_amd64.rpm   For Debian-based systems, use:\nsudo apt update sudo apt upgrade sudo apt install ./wktui_1.0.0_amd64.deb   If the installation is on a server machine, you should logout from the current terminal session and use X11 forwarding mechanism or any remote desktop application to the remote terminal for launching the WKT UI application.\nAlternatively, you can download the AppImage file, copy it to your local file system, then either:\n  Open a terminal, navigate to the directory where the file exists, and make it executable; for example:\nchmod u+x \u0026lt;AppImage Name\u0026gt;\n  Use your file manager, right click on the file, edit the properties, and change the permissions to make it executable.\n  If you download and run the AppImage file, you get the added benefits of 1.) Not requiring an installation or root access and 2.) Being able to participate in the auto-update functionality, like macOS and Windows.\nHelpful Hints   When launching the WKT UI application, if you see this:\nlibGL error: No matching fbConfigs or visuals found libGL error: failed to load driver: swrast This is harmless and can be removed by setting the environment variable:\nexport LIBGL_ALWAYS_INDIRECT=1\n  If you are storing credentials in the OS native store, and you see this failure message:\nError occurred in handler for 'save-project': Error: Failed to save credential for image. imageRegistryPushUser: Error: No such interface \u0026quot;org.freedesktop.Secret.Collection\u0026quot; on object at path / org/freedesktop/secrets/collection/login at /tmp/.mount_WebLogpIPFto/resources/app.asar/app/js/credentialManager.js:92:32 You can solve it by running this command (only once) before launching the WKT UI application:\ndbus-update-activation-environment --systemd DBUS_SESSION_BUS_ADDRESS DISPLAY XAUTHORITY\n  Application Startup Application startup detects Internet connectivity to GitHub. If it fails to connect, a Network Configuration dialog appears in which you can set or modify your proxy settings, test your changes, and then restart the application.\nLaunching the application displays a thorough \u0026ldquo;Introduction\u0026rdquo; to the WKT UI. Step through it or dismiss it; you can peruse it at any time using Help \u0026gt; Show Introduction.\nVersion Updates Upon application startup, if a more recent version exists, an Application Update dialog appears with these choices:\n Install Now Install on Exit  Downloads the application and installs it after you exit. Not available on macOS.   Ignore Update  At any time, you can check for application updates using Help \u0026gt; Check for WKT UI Updates.\nFor updates to in-application versions of WKT Tools (WebLogic Deploy Tooling and WebLogic Image Tool), select Help \u0026gt; Check for WKT Tool Updates.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-toolkit-ui/setup/quickstart/set-up-wktui-app/",
	"title": "Set up the WKTUI application",
	"tags": [],
	"description": "",
	"content": "To install the WKTUI application:\n Make sure to check the NOTE in the WKTUI Prerequisites for your OS compatibility with regard to Electron support. Go to the GitHub project Releases page and download the latest release. Run the appropriate installer for your operating system.  Each release has many assets. For a detailed description of them, see Install WKT UI.\nWKTUI Startup WKTUI requires Internet connectivity, not only for proper UI rendering, but also for REST APIs calls that it makes to GitHub for detecting and downloading updates, when they are available, and for determining the available versions of related software. As such, WKTUI checks for Internet connectivity at application startup. If WKTUI fails its Internet connectivity check, it will display the Network Configuration dialog.\nEnter, correct, or remove your proxy information, as appropriate to connect to the Internet and then click Try Connection. After the connection is successful, Restart Application will activate; clicking it will save your configuration and restart the application.\nUpdates WKTUI has a built-in, auto-update functionality. Each time the application starts, it checks GitHub to determine if a newer version of the application is available. When a newer version is available, this dialog box appears giving the options of installing the update now, installing the update upon exiting the application, and ignoring the update.\nIf the update is not installed, the application will prompt you again the next time it starts. At any time, you can check for application updates by using the Help \u0026gt; Check for WKT UI Updates menu item. Note that this auto-update functionality is not available when installing using the traditional Linux RPM or DEB installers.\nWKT Tools WKTUI bundles two other open source tools that are part of the WebLogic Kubernetes Toolkit (WKT):\n WebLogic Deploy Tooling (WDT) WebLogic Image Tool (WIT)  Each release of the WKTUI application bundles the latest releases of these tools, however, you can check for updated versions between WKTUI releases by using the Help \u0026gt; Check for WKT Tools Updates menu item. If an update for one or both tools is available, a dialog box, like the following one, will be displayed. Click Update Tool(s) to update the bundled tools.\nWKTUI integrates with the WebLogic Remote Console to provide visual editing of the WDT model of the WebLogic Server domain.\n To install the WebLogic Remote Console, go to the GitHub project page, download, and install the latest release compatible with WKTUI, as specified on the Model page, shown in the following image. After it\u0026rsquo;s installed, you\u0026rsquo;ll need to configure WKTUI to locate the WebLogic Remote Console installation.  Start the WKTUI application and go to the Model page, shown in the following image.\nAs you can see, the path to the WebLogic Remote Console Install Location is already populated. Depending on your platform, this may or may not be the case. Make sure that the location is correct and then click Start WebLogic Remote Console. If the versions of the applications are not compatible, WKTUI will display a dialog box with the compatible version requirements. Otherwise, the page will be refreshed with a screen that provides visual editing of the WDT model, as shown in the following image.\nUser Preferences WKTUI supports user preferences; that is, preferences that are specific to a user on a particular machine. To open the User Preferences dialog on Windows or Linux, use the File \u0026gt; Preferences menu item. On macOS, use the WebLogic Kubernetes Toolkit UI \u0026gt; Settings menu item.\nUsing this dialog, you have access to view and edit settings in the following areas:\n Proxy Configuration – Change the proxy and no proxy settings for the network. WebLogic Remote Console Configuration – Change the WebLogic Remote Console installation directory. Logging Configuration – Change the logging level and log directory location. Startup Internet Connectivity Test Configuration – Change the timeout on the Internet connection check. This is the same as the Request Timeout Seconds field. WebLogic Kubernetes Toolkit UI Introduction Configuration – Change whether the introduction shows at application startup or not.  Explore WKTUI Now that the WKTUI application is installed and configured, it is time to explore the functionality of the WKTUI application. To make this adventure more hands-on, you will lift and shift a ToDo List application running in an on-premises environment and move it to Kubernetes. The initial quick start documents cover both tracks, then the flow splits into the following two tracks:\n WebLogic Kubernetes Operator Verrazzano  At the end of either track, the ToDo List application will be running in a Kubernetes environment.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-toolkit-ui/navigate/kubernetes/k8s-weblogic-domain/",
	"title": "WebLogic Domain",
	"tags": [],
	"description": "Create and deploy the Kubernetes custom resource for the WebLogic domain.",
	"content": "Contents  WebLogic Domain Design View  Primary Image to Use for the Domain Auxiliary Image to Use for the Domain Clusters Model Variables Overrides Secrets Runtime Encryption Secret WebLogic Kubernetes Operator Introspection Configuration Domain-Wide Server Settings Domain-Wide Node Selector   Code View Prepare Model Deploy Domain Get Domain Status Undeploy Domain  WebLogic Domain The WebLogic Domain section provides support for creating and deploying the Kubernetes custom resource for the WebLogic domain as defined by the WebLogic Kubernetes Operator. For more information, see Domain Resource in the WebLogic Kubernetes Operator documentation.\nDesign View Design View helps you specify the necessary data needed to generate the Domain resource definition and deploy that resource into a Kubernetes cluster.\nThe Domain UID field defines the name of the Kubernetes Domain custom resource object. This name must be unique within the Kubernetes namespace where it will be created, which is controlled by the Kubernetes Namespace field.\nThe default value of the Domain UID field is based on the WebLogic domain\u0026rsquo;s name, as defined by the WDT model:\n When using either \u0026ldquo;Model in Image\u0026rdquo; or \u0026ldquo;Domain in Image\u0026rdquo; domain location, the Domain Home Path field is read-only and its value is set using the Domain Home Directory field under Advanced. When using \u0026ldquo;Domain in PV\u0026rdquo;, this field must be set to the fully qualified path to the domain home directory in the persistent volume. For example, if the persistent volume mount path is set to /shared and the domain home is located in /domains/mydomain in the persistent volume, then the Domain Home Path field must be set to /shared/domains/mydomain.  For \u0026ldquo;Model in Image\u0026rdquo;, use the Domain Type field to specify the type of domain to create using the model.\nSet the Kubernetes secret name where the WebLogic domain credentials will be stored using the WebLogic Credentials Secret Name field. Set the value of the WebLogic Server administration credentials using the WebLogic Admin Username and WebLogic Admin Password fields. Remember that these fields must be set appropriately for the selected domain location:\n For \u0026ldquo;Model in Image\u0026rdquo;, these fields are used to set the WebLogic Server credentials used to create the domain, and by the operator at runtime to perform actions on the domain (for example, start a server). For \u0026ldquo;Domain in Image\u0026rdquo;, the domain was created using the WebLogic Image Tool using the credentials specified in the model. These values must match the ones used during the image creation process. For \u0026ldquo;Domain in PV\u0026rdquo;, the domain was created outside the application so the values provided in these fields must match the ones used when the domain was created.  When using \u0026ldquo;Domain in PV\u0026rdquo;, three additional fields associated with the persistent volume will be shown:\n Persistent Volume Name - The name of the persistent volume to use in the Domain resource file. Persistent Volume Claim Name - The persistent volume claim to associate with the persistent volume. Persistent Volume Mount Path - The path to the persistent volume within the container(s). Enable Log Home - Enables the ability to separate the logs directory from the domain directory on the persistent volume. Log Home Path - The path to use for the log home when Enable Log Home is enabled.  The WebLogic Kubernetes Operator Installed Version field assumes an installed WebLogic Kubernetes Operator version 4.0. If you use the WKT UI to install the WebLogic Kubernetes Operator, the field will be populated with the installed version. If not, you can get the installed operator version from the Kubernetes cluster by clicking the icon. Note that the value of this field impacts the Domain Resource generated and used by the WKT UI. If the operator version is earlier than 4.0.0, then the generated Domain Resource will be compatible with WebLogic Kubernetes Operator v3.x. Otherwise, the generated Domain Resource will be usable only by WebLogic Kubernetes Operator v4.0.0 and later.\nThe following sections describe the other panes that support configuring the generated Domain resource; they are:\n Primary Image to Use for the Domain Auxiliary Image to Use for the Domain Clusters Model Variables Overrides Secrets Runtime Encryption Secret WebLogic Kubernetes Operator Introspection Configuration Domain-Wide Server Settings Domain-Wide Node Selector  Primary Image to Use for the Domain This pane focuses on the container primary image to use to run the WebLogic Server domain in a container. If you select Create a New Primary Image, then click Go To Create Primary Image Page to configure the image. For detailed information, see the Image section.\n When using either \u0026ldquo;Model in Image\u0026rdquo; or \u0026ldquo;Domain in Image\u0026rdquo; domain location, the Primary Image Tag field is read-only; its value is set using the Image Tag field in the Image section. In the case of \u0026ldquo;Domain in PV\u0026rdquo;, the Image Tag field is not read-only and is the place to specify the image to use to run the WebLogic domain\u0026rsquo;s containers. The read-only Image Registry Address field is populated by parsing the value of the Image Tag field to extract any container image registry address. If the tag has no image registry address, then it is assumed to reside on Docker Hub.  Use the Primary Image Pull Policy field to specify when Kubernetes should pull the image from the specified image registry. The choices are:\n If Not Present (default) - Only pull the image if it is not already present on the Kubernetes node. Always - Pull the image every time the image is needed to start a container. Never - Never pull the image; this will result in an error if the image is not already present on the Kubernetes node.  If pulling the image from the specified image registry does not require authentication, then Specify Image Pull Credentials should be disabled. When enabled, use the Use Existing Image Pull Secret field to tell the application whether to use an existing image pull secret or create a new one. Specify the image pull secret name in the Image Pull Secret Name field. When creating a new secret, specify the secret data using the Image Registry Pull Username, Image Registry Pull Email Address, and Image Registry Pull Password fields.\nAuxiliary Image to Use for the Domain Under Auxiliary Image Configuration, use the radio buttons to specify whether or not to use an Auxiliary Image (an existing one) or create a new one (the default). If you select Create a New Auxiliary Image, then click Go To Create Auxiliary Image Page to configure the image. For detailed information, see the Image section.\nFor \u0026ldquo;Model in Image\u0026rdquo; domains only, this pane focuses on the container auxiliary image to use for the domain.\n  The Auxiliary Image Tag field is read-only; its value is set using the Auxiliary Image Tag field in the Auxiliary Image page of the Image section.\n  Use the Auxiliary Image Pull Policy field to specify when to pull the domain\u0026rsquo;s auxiliary image from the image registry. The choices are:\n If Not Present (default) - Only pull the image if it is not already present. Always - Pull the image every time the image is needed to start a container. Never - Never pull the image; this will result in an error if the image is not already present.    If pulling the image from the specified image registry does not require authentication, then Specify Auxiliary Image Pull Credentials should be disabled. When enabled, use the Use Existing Auxiliary Image Pull Secret field to tell the application whether to use an existing image pull secret or create a new one. Specify the image pull secret name in the Auxiliary Image Pull Secret Name field. When creating a new secret, specify the secret data using the Auxiliary Image Registry Pull Username, Auxiliary Image Registry Pull Email Address, and Auxiliary Image Registry Pull Password fields.\nClusters The Clusters pane lists the names of each cluster in the model and lets you adjust the WebLogic Server startup configuration and Kubernetes resource requests and limits. It is currently populated when Prepare Model is run, which means that projects using \u0026ldquo;Domain in PV\u0026rdquo; will not have access to adjust the configuration at the cluster level. \u0026ldquo;Domain in PV\u0026rdquo; projects can still use the Domain-Wide Server Settings pane under Advanced.\nTo view or edit the settings for a cluster, select the edit icon at the right end of the cluster\u0026rsquo;s row in the table. This opens a dialog that shows all the cluster-related fields and their values. The read-only Cluster Name field shows the name of the cluster, as specified in the underlying model.\nUse the Replicas field to adjust the number of managed servers that the WebLogic Kubernetes Operator should start when the domain is deployed. The default value for the Replicas field is set based on the maximum number of servers specified by the model:\n In the case of a static cluster, it will be the number of servers that are configured to be part of the cluster. When using a dynamic cluster, the value is set based on the maximum number of servers that the dynamic cluster allows. This default value also serves as the upper limit for the Replicas field. In other words, you may only reduce the number of replicas. It is not possible to increase the replica count above the maximum limit defined by the model.  Use the Minimum Heap Size and Maximum Heap Size fields to control the amount of Java heap space available for each server in the cluster. Specify any additional Java command-line options with the Additional Java Options field.\nDisable debug logging to standard out disables WebLogic Server debug log messages from being written to standard out. In WebLogic Server 12.2.1.3.0, there is an issue that impacts the Oracle JDBC driver processing FAN (Fast Application Notification) events from an Oracle Database. To work around this issue, enable Disable Oracle JDBC Support for FAN Events.\nUse pseudo-random number generator controls whether WebLogic Server uses the pseudo-random number generator (that is, /dev/urandom) or the regular random number generator (that is, /dev/random). Because the latter is impacted by the available entropy, it can negatively impact performance when running WebLogic Server on a virtual machine or in a container. Because the servers being configured by this application will always be running in a container, the default is set to use the pseudo-random number generator.\nThe Kubernetes resource requests and limits values help the Kubernetes scheduler determine which node to use to start a container (to ensure there are sufficient resources available for the container to run). The following fields allow these values to be specified:\n Kubernetes CPU Request - The requested amount of CPU for each managed server\u0026rsquo;s container. Kubernetes CPU Limit - The maximum amount of CPU each managed server\u0026rsquo;s container is allowed to use. Kubernetes Memory Request - The requested amount of memory for each managed server\u0026rsquo;s container. Kubernetes Memory Limit - The maximum amount of memory each managed server\u0026rsquo;s container is allowed to use.  For more information about these fields and setting their values, see the Kubernetes documentation.\nModel Variables Overrides Use this pane to override values of model variables when using \u0026ldquo;Model in Image\u0026rdquo; to customize the model data already set in the image. For example, the image may contain a variable whose value refers to a JDBC URL to connect to a database. Because the image may be used across development, test, and production environments, overriding the JDBC URL to point to the correct database for the environment helps make the same image usable across all three environments. All override values are added to a Kubernetes ConfigMap that is passed to the WebLogic Kubernetes Operator so that it creates the underlying WebLogic Server domain with the correct values for the environment.\nIf the model has one or more variables, then the Kubernetes Config Map Name field is visible and allows the name of the Kubernetes ConfigMap name to be controlled. The table will be populated with the model variables, as defined by the model variables file. Because the model variables file is typically already set in the image by the time you reach this page, both the Model Variable Name and the Model Variable File Value entries are read-only. Enter an Model Variable Override Value for any variable whose Model Variable File Value should be overridden. Note that the ConfigMap will only be created if one or more variables have an override value specified.\nSecrets When using \u0026ldquo;Model in Image\u0026rdquo;, use this pane to set the value of any secrets referenced in the model (other than the WebLogic administrator credentials secret). The secrets that appear in the table are pulled from the model file directly; as such, the Secret Name field is read-only. Set the appropriate Username and Password field values for each secret in the table. These values are required and will be used to create or update the secret with the specified values.\nRuntime Encryption Secret When using \u0026ldquo;Model in Image\u0026rdquo;, the WebLogic Kubernetes Operator requires a runtime encryption secret it uses to encrypt sensitive WebLogic Server domain data stored in Kubernetes. For more information, see Required runtime encryption secret in the WebLogic Kubernetes Operator documentation.\nUse the Runtime Encryption Secret Name field to control the name of the secret, if needed. Typically, the default name is sufficient. The Runtime Encryption Secret Value field\u0026rsquo;s default value is generated but may be changed, if desired.\nWebLogic Kubernetes Operator Introspection Configuration This pane controls the WebLogic Kubernetes Operator introspection job configuration. Use the Introspection Job Active Deadline Seconds field to control how long the operator waits for the introspection job to complete. The application sets the default to 900 seconds (15 minutes); this overrides the underlying default of 120 seconds (2 minutes) built into the operator. As such, clearing the value of this field will cause the effective value to be set to 120 seconds.\nDomain-Wide Server Settings This pane lets you adjust the WebLogic Server startup configuration and Kubernetes resource requests and limits default values for every WebLogic Server container in the WebLogic Server domain. Any fields set here will be applied only if they are not overridden elsewhere. For example, setting the Minimum Heap Size will set WebLogic Server\u0026rsquo;s minimum heap size to the specified value only if the cluster to which the server belongs does not override the minimum heap size. For typical domains with an Administration Server and one or more clusters, the best practice is to use this section to configure the Administration Server and use the Clusters pane to configure each cluster explicitly.\nThe fields in this pane have similar meaning to the equivalent fields previously described in Clusters; refer to that section for more information.\nDomain-Wide Node Selector This pane lets you specify the nodes on which to run.\nCode View Code View displays a shell script for deploying the domain and creating its dependent resources as well as the YAML definition for the Kubernetes custom resource (that is, the Domain resource) and the Model Variables Overrides ConfigMap, if applicable.\nIf it is not already selected, then use the Script Language drop-down menu to choose the desired scripting language. Note that the application is providing a working sample script simply to show how the process might be automated. Before using the script, review the script and make any changes necessary for your environment. One typical change that would be considered a best practice would be to change the script to accept either command-line arguments or externally set environment variables to specify any credentials required by the script to eliminate hard-coding the credentials in the script itself. This change is left as an exercise for you because different environments typically will have existing standards for securely handling such credentials.\nPrepare Model Prepare Model is the same as was previously described in the Model section. It is only surfaced here because the Clusters pane of the Design View is populated only when Prepare Model is run.\nDeploy Domain Deploy Domain creates the Domain custom resource object and any of its dependent objects (for example, namespace, secrets, ConfigMap) in Kubernetes. You access this action by using the Deploy Domain button on the WebLogic Domain page or the Go \u0026gt; Deploy WebLogic Domain to Kubernetes menu item. As previously mentioned, this action also updates the operator configuration, if needed, and reruns the operator Helm chart to ensure that the new namespace is manageable by the WebLogic Kubernetes Operator configured for this project.\nDeploy Domain completes as soon as the objects are created and the operator Helm chart execution completes. At some point after the action completes, the operator will detect a new (or updated) version of the Domain custom resource object and start a new introspection job to create the domain and start or restart the WebLogic Server containers. Get Domain Status provides the current status of the last Deploy Domain action.\nGet Domain Status To view the current status of the last domain deployment, use the Get Domain Status button or the Go \u0026gt; Get WebLogic Domain Status. This action retrieves and displays the domain deployment status, as provided by the WebLogic Kubernetes Operator.\nUndeploy Domain Undeploy Domain removes the Kubernetes custom resource for the WebLogic domain and its dependent objects in Kubernetes. In addition, you can choose whether to also delete the corresponding namespace. You access these actions by using the Undeploy Domain button on the WebLogic Domain page or the Go \u0026gt; Undeploy WebLogic Domain to Kubernetes menu item.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-toolkit-ui/navigate/",
	"title": "Navigate the UI",
	"tags": [],
	"description": "",
	"content": "Before you begin Make sure you have read About the WKT UI Application.\nAbout the UI To help you understand how to use the WKT UI, we will step you through it, section by section, describing the important decisions to make and fields to populate. The sections are listed in the left side navigation pane. Depending on the Kubernetes Environment Target Type field on the Project Settings page, you will see either the Kubernetes or Verrazzano section.\nThe UI sections are:\n Project Settings Model Image Kubernetes  Client Configuration WebLogic Operator WebLogic Domain Ingress Controller   Verrazzano  Client Configuration Installation Component Application    At the bottom of the page, the collapsed Console panel automatically appears and displays the stdout and stderr streams when running certain actions, such as Prepare Model.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-toolkit-ui/navigate/verrazzano/vz-application/",
	"title": "Application",
	"tags": [],
	"description": "Define and deploy a Verrazzano application.",
	"content": "Contents  Verrazzano Application Design View  Components   Code View Deploy Application Undeploy Application  Verrazzano Application A Verrazzano application is comprised of Components. Components encapsulate application implementation details. For detailed information, see Applications in the Verrazzano documentation.\nThe Application section makes it easy to compose an application that includes the Component for the WebLogic domain.\nDesign View Design View provides values for defining the application and customizing it for the target environment.\n Application Name - The name of the Verrazzano application. Application Namespace - The Kubernetes namespace to which the application will be deployed. Application Version - The version annotation value to add to the Verrazzano application. Application Description - The description annotation value to add to the Verrazzano application. Verrazzano Version - Provide the installed Verrazzano version. Click the icon to retrieve the value from the environment. Use Multicluster Application - Select whether to make this a multicluster application.  Create Verrazzano Project - To deploy a multicluster application, a Verrazzano Project that includes the current application\u0026rsquo;s namespace must exist. Select whether to create a new Verrazzano Project. Secret Names - The secret names in the current namespace to associate with the application. To edit this field, click Choose Secrets. Verrazzano Clusters for Application Placement - The Verrazzano cluster names where the application should be placed. To edit this field, click Choose Verrazzano Clusters.    Components You can apply Traits to customize Components for the environment. Traits customize Component workloads and generate related resources during deployment.\nUse the Add Components button to apply Traits to your application:\n Ingress Trait - provides a simplified integration with the Istio Ingress Gateway included in the Verrazzano platform. Manual Scalar - lets you specify the desired replica count. Metrics Trait - provides a simplified integration with the Prometheus service included in the Verrazzano platform. Logging Trait - contains the configuration for an additional logging sidecar with a custom image and Fluentd configuration file.  Code View Code View displays a shell script for deploying the application for the WebLogic domain into Verrazzano as well as the application YAML resource definition and project resource, if applicable.\nIf it is not already selected, then use the Script Language drop-down menu to choose the desired scripting language. Note that the application is providing a working sample script simply to show how the process might be automated. Before using the script, review the script and make any changes necessary for your environment. One typical change that would be considered a best practice would be to change the script to accept either command-line arguments or externally set environment variables to specify any credentials required by the script to eliminate hard-coding the credentials in the script itself. This change is left as an exercise for you because different environments typically will have existing standards for securely handling such credentials.\nDeploy Application Deploy Application deploys the application to Verrazzano. You access this action by using the Deploy Application button or the Go \u0026gt; Deploy Verrazzano Application menu item.\nUndeploy Application Undeploy Application removes the Verrazzano application from the WebLogic domain and its dependent objects in Kubernetes. Undeploying the application stops the pods associated with the application. In addition, you can choose whether to also delete the corresponding namespace. Removing the application namespace removes all applications, components, secrets, ConfigMaps, and other Kubernetes objects that exist in the Kubernetes namespace. You access these actions by using the Undeploy Application button or the Go \u0026gt; Undeploy Verrazzano Application menu item.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-toolkit-ui/setup/quickstart/qs-verrazzano/vz-application/",
	"title": "Deploy the Verrazzano Application",
	"tags": [],
	"description": "Deploy the Verrazzano application.",
	"content": "A Verrazzano application is a list of components, each with zero or more traits attached. Go to the Verrazzano \u0026gt; Application page. Add all five components and fill out the remaining fields, as shown in the following figure.\nNow, expand the todolist-domain component, enable Enable Ingress Trait, and click the plus sign on the Ingress Rules table. Fill in the resulting form with the data shown in the following image.\nClick Deploy Application. After the action completes, it will still take several minutes for the application to fully deploy. Use Get Application Status to check on the progress.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-toolkit-ui/navigate/kubernetes/k8s-ingress-controller/",
	"title": "Ingress Controller",
	"tags": [],
	"description": "Install and configure an ingress controller.",
	"content": "Contents  Ingress Controller Design View  Ingress Controller Configuration TLS Secret for Ingress Routes Ingress Routes Configuration   Code View Install Ingress Controller Update Ingress Routes Uninstall Ingress Controller  Ingress Controller This section supports two distinct functions related to an ingress controller. First, it supports installing an ingress controller to a Kubernetes cluster. Second, it supports adding the necessary routes to an ingress controller to make a deployed WebLogic domain\u0026rsquo;s endpoints accessible.\nDesign View Design View helps you specify the data needed to install an ingress controller, if desired, and specify the data needed to expose one or more endpoints for a deployed WebLogic domain. This page contains three panes:\n Ingress Controller Configuration TLS Secret for Ingress Routes Ingress Routes Configuration  Ingress Controller Configuration The most important field in this pane is the Ingress Provider field. This fields tells the WKT UI application with which of the supported ingress controllers it will need to work. The current release supports two ingress controllers:\n NGINX Traefik  To install the ingress controller, enable Install Ingress Controller.\n To set the release name used by the Helm install process, use the Helm Release Name to Use field. Set the Kubernetes namespace to which the ingress controller should be installed with the Ingress Controller Namespace field.  The container image for the Traefik ingress controller resides in Docker Hub. Due to changes made to Docker Hub, anonymous pull requests are throttled. This can result in pull requests being denied when the Kubernetes cluster attempts to pull the image and start the container.\n To work around this limitation, enable the Use Docker Hub Secret field to provide login credentials for Docker Hub. The Docker Registry Secret Name field specifies the name of the Kubernetes pull secret to use when pulling the image. To create this secret, enable Create Docker Hub Secret and fill in the pull secret data in the Docker Hub Username, Docker Hub Password, and Docker Hub Email Address fields. For the NGINX ingress controller, if you want to have SSL pass through the ingress route, enable Allow SSL pass through to target service.  TLS Secret for Ingress Routes Use this pane to configure the Transport Layer Security (TLS) secret containing the certificate and private key data that will be used by the ingress controller when establishing HTTPS connections from clients to the ingress controller. The TLS connection will be terminated at the ingress controller, so traffic between the ingress controller and services/pods will not be encrypted. In the current release, only a single TLS certificate is supported for the routes being defined.\n To use TLS-enabled routes, enable Use Ingress TLS Secret and provide the secret name using the Ingress TLS Secret Name field. To have the application create this secret, enable Create Ingress TLS Secret. If you already have a certificate file and its corresponding private key file, then use the TLS Certificate File and TLS Private Key File fields to provide them. To create these files automatically, enable Generate a TLS Certificate and Private Key.  Provide the path to the OpenSSL executable using the OpenSSL Executable to Use field. Use the Subject to Use for the Generated TLS Certificate field to specify the data to put into the subject of the certificate.  For example, if your ingress route will use the virtual host name www.myapp.com, you might specify the subject contents as /CN=www.myapp.com. The subject data will support multiple key/value pairs using a comma-separated syntax, like /key1=value1,/key2=value2,/key3=value3.      Ingress Routes Configuration Use the table in this section to define the ingress routes to be added by the application. Note that this table does not currently display existing routes already defined. Any routes defined in or removed from the table will happen in the WKT Project object. When applying or updating the routes, only the fields currently in the table will be considered. If the routes do not exist, then they will be added. If one or more of the routes already exists, then the application will warn you to confirm whether you want to update the existing route or routes before performing the operation.\nTo add a new route, click the plus (+) button in the table header. To edit a route, use the edit button on the corresponding route row. To remove a route, use the delete icon on the corresponding route row.\nWhen editing a route:\n Use the Name field to set the route name. Use the Virtual Host and Path Expression fields to define the matching rules that determine which requests match this route. All requests in the defined rules are routed to the service specified by the Target Service field that resides in the namespace specified by the read-only Target Service Namespace field and the port specified by the Target Port field. After the domain has been deployed, you can select the Target Service value from the drop-down list of available services in the WebLogic Kubernetes Operator domain\u0026rsquo;s namespace. After the Target Service is selected, you can select the Target Port from the list of available ports in the selected target service. Specify the Transport Option for the ingress route:  Select Plain HTTP for unencrypted traffic from the client through the ingress controller to the target service. Select SSL terminate at ingress controller for SSL terminating at the ingress controller and then unencrypted traffic from the ingress controller to the target service.  Enable Is target service WebLogic Console? if the target service is the WebLogic Console service.   Select SSL pass through for SSL traffic to pass through the ingress controller and then terminate at the target service.  If you select this option, you must also specify a valid DNS value in \u0026lsquo;Virtual Host\u0026rsquo;, and all SSL traffic from theVirtual Host will be routed to the target service. Make sure that the Target Port supports SSL.     Use the Ingress Route Annotations table to add annotations to the ingress route, as needed. Do not remove any pre-populated annotations.  Code View Code View displays shell scripts for installing an ingress controller and for updating ingress routes. It also displays the YAML definitions of the routes to be added, if applicable.\nIf it is not already selected, then use the Script Language drop-down menu to choose the desired scripting language. Note that the application is providing a working sample script simply to show how the process might be automated. Before using the script, review the script and make any changes necessary for your environment. One typical change that would be considered a best practice would be to change the script to accept either command-line arguments or externally set environment variables to specify any credentials required by the script to eliminate hard-coding the credentials in the script itself. This change is left as an exercise for you because different environments typically will have existing standards for securely handling such credentials.\nInstall Ingress Controller Install Ingress Controller creates any namespace and secret specified and runs the ingress controller\u0026rsquo;s Helm chart to install the ingress controller. You access this action by using the Install Ingress Controller button on the Ingress Controller page or the Go \u0026gt; Install Ingress Controller menu item.\nUpdate Ingress Routes Update Ingress Routes creates the TLS secret, if needed, and adds or updates the specified ingress routes. You access this action by using the Update Ingress Routes button on the Ingress Controller page or the Go \u0026gt; Update Ingress Routes to Domain menu item.\nUninstall Ingress Controller Uninstall Ingress Controller uses the helm uninstall command to remove all the ingress resources and uninstall the ingress controller. In addition, you can choose whether to also delete the corresponding namespace. You access these actions by using the Uninstall Ingress Controller button on the Ingress Controller page or the Go \u0026gt; Uninstall Ingress Controller menu item.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-toolkit-ui/setup/quickstart/qs-kubernetes/k8s-ingress-controller/",
	"title": "Install and Configure the Ingress Controller",
	"tags": [],
	"description": "Install and configure an ingress controller.",
	"content": "While the domain is up and running, it is only accessible from inside the Kubernetes cluster. Before you can expose your application, you need to install an ingress controller. WKTUI can install the Traefik or NGINX ingress controllers. In this exercise, you will use Traefik.\nGo to the Kubernetes \u0026gt; Ingress Controller page. Even though the default settings should be sufficient, you will create an image pull secret for Docker Hub, as shown in the following image, to make sure that your cluster doesn’t encounter an error due to Docker Hub rate limiting of anonymous pull requests. When ready, click Install Ingress Controller.\nAfter the ingress controller is installed, next you will expose your application by creating an ingress route.\nAt the bottom of the page, click the plus sign on the Ingress Routes Configuration table to add a new route. When the row appears, click the pencil icon to edit the route. Set the fields of the route, as shown in the following image.\nNotice that WKTUI has queried the services in the domain’s namespace and provides a drop-down menu from which to choose. To route to your mycluster cluster, set the Target Service field to the todolist-domain-cluster-mycluster service, which the operator created automatically when deploying the domain. This service is exposing only port 7100 so select that for the Target Port. When finished, click OK to update the Ingress Routes Configuration table.\nNow that the ingress route is ready, click Update Ingress Routes to create the route. The Update Ingress Routes action is a little different from other actions in WKTUI. Most Kubernetes clusters use a single ingress controller that routes traffic for all applications in the Kubernetes cluster. Because of the complexities of ingress controllers and their varying implementations, it is very difficult to know how to update an existing rule so WKTUI can only replace it. Therefore, when WKTUI detects that one or more of the rules that you are trying to create already exists, it prompts you to verify that you want to overwrite the existing rule.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-toolkit-ui/setup/quickstart/project-settings/",
	"title": "Select the Project Settings",
	"tags": [],
	"description": "",
	"content": "  Start WKTUI.\nWKTUI uses the concept of a project that is like a project in an Integrated Development Environment (IDE). You will create a new project.\n  Using the File menu, select New Project, choose a directory, and enter the file name todo-list.wktproj.\nAt this point, you will be on the Project Settings page that will look something like the one shown in the following image.\nNote: If you are not running on macOS, you will not see this top-most panel: For macOS, do you need to add directories to the PATH or define other environment variables for Docker/Podman or Kubernetes?\n  Extra Environment Settings (macOS only) Unlike Windows or Linux, applications on macOS that are started from the Finder, Dock, or Launchpad, do not inherit the user’s environment. To see the environment that WKTUI inherits from the operating system, select Show System Path and Show System Environment. For now, you will not add any extra environment settings. Instead, you will return to add these if you encounter an error that requires them.\nStoring the Project Credentials WKTUI realizes that different organizations and different projects have different security standards for storing credentials. As such, you have three options in WKTUI for how to store a project’s credentials:\n  Store in the Native OS Credential Store – This option lets you store each credential field in a separate field in the operating system’s credential store (for example, Windows Credential Manager, macOS Keychain). When using this option, the project file stores only an indicator for each field stored in the credential store. When the project is opened, WKTUI tries to load each credential from the credential store into memory. When the project is saved, WKTUI writes each credential field with a value to the credential store and updates the markers in the project file. With this option, you have a secure means of storing your credentials on the local machine. If you try to open the project on a new machine, the credentials will not be found so you will need to re-enter them.\nNOTE: When opening a project in a new version of WKTUI, the operating system will likely prompt you for your login password to allow the application to access the credential in the credential store. The tedious part is that the prompt is per credential, so if you have 15 credential fields, you will be prompted by the operating system to enter your password 15 times.\n  Store Encrypted in Project File – This option lets you store the credentials directly in the project file. WKTUI encrypts each credential field using a passphrase that you provide and modern AES 256 bit encryption algorithms and techniques. On opening the project, WKTUI will prompt you for the encryption passphrase to use to decrypt the credential fields loaded into memory. If you remember the encryption passphrase, you can easily move the project files from machine to machine without losing the project credentials.\n  None – This option is the most secure in that the credentials are never stored. Of course, this means that you must re-enter the credentials every time you open the project.\n  For this project, you will choose the Store Encrypted in Project File option to make it easier on readers running on Linux.\nOracle Fusion Middleware Domain Target Location WebLogic Kubernetes Operator (WKO) has three mechanisms for storing the WebLogic domain directory for use in Kubernetes:\n  Created in the container from the model in the image – With this option, you provide a WebLogic Deploy Tooling (WDT) model of the domain and a WDT installer in an image, and the WebLogic Kubernetes Operator will create and update the domain for you. This option is also called Model-in-Image (MII) and WKO calls it FromModel.\n  Created as part of the image – With this option, you provide a WebLogic Deploy Tooling (WDT) model of the domain and a WDT installer to the WebLogic Image Tool (WIT) while creating the image, and WIT creates the domain inside the image. This option is also called Domain-in-Image (DII) and WKO calls it Image. NOTE: WKO has deprecated this option.\n  Externally created in a Kubernetes persistent volume – With this option, you must create a Kubernetes persistent volume and create the domain on that persistent volume. This option is also called Domain-on-PV (DoPV) and WKO calls it PersistentVolume.\n  The ToDo List application requires only WebLogic Server and fits well with the Model-in-Image mechanism, so select Created in the container from the model in the image.\nKubernetes Cluster Target Type This is where you must choose whether to deploy directly using a Kubernetes cluster, where you install WebLogic Kubernetes Operator and an Ingress controller, or to deploy to Verrazzano. Because the Quick Start guide covers both tracks, choose the option that matches the track you plan to follow.\nJava Installation You need to tell WKTUI which Java installation to use when running actions that require the WebLogic Deploy Tooling or WebLogic Image Tool. For this project, choose the Java Home directory for your Oracle JDK 11 directory.\nOracle Fusion Middleware Installation Running the WebLogic Deploy Tooling requires an Oracle Home directory. As such, you must tell WKTUI which Oracle Home directory contains the Oracle Fusion Middleware software you plan to use. Because this project uses WebLogic Server (WLS) 14.1.1, set this field to the directory containing your WLS 14.1.1 installation.\nImage Builder Tool Because you will be building an image as part of this project, you need to tell WKTUI whether you will use Docker or Podman to build your image. You also need to provide the path to the executable that matches your selection. Because you are running Rancher Desktop on macOS, you will select Docker and supply the Docker executable (for example, /Users/fred.jones/.rd/bin/docker). Provide the answers that best fit your environment.\nNow that your project settings are mostly complete, use the File menu, Save All option to save the project before you move on to creating the model for your domain. WKTUI will prompt you for the encryption passphrase you want to use with this project. Choose whatever value you like; just try not to forget it!\n"
},
{
	"uri": "https://oracle.github.io/weblogic-toolkit-ui/developer/",
	"title": "Developer Guide",
	"tags": [],
	"description": "",
	"content": "The WebLogic Kubernetes Toolkit UI is a desktop application designed to help WebLogic users move their applications to run in a Kubernetes environment.\nSetting up your development environment   Download and install the latest LTS version of node.js from https://nodejs.org/en/download/.\n  If you rely on a proxy server to reach the Internet, set these five environment variables to configure the proxy correctly:\nELECTRON_GET_USE_PROXY=true GLOBAL_AGENT_HTTPS_PROXY=\u0026lt;proxy-url\u0026gt; WKTUI_DEV_PROXY=\u0026lt;proxy-url\u0026gt; HTTPS_PROXY=\u0026lt;proxy-url\u0026gt; NO_PROXY=\u0026lt;list-of-no-proxy-hosts\u0026gt;   Open a command line and run the following command to update the version of npm to the latest:\nsudo npm install --global npm   Set up your global git configuration by running the following commands:\ngit config --global user.name \u0026#34;\u0026lt;your real name\u0026gt;\u0026#34; git config --global user.email \u0026#34;\u0026lt;your-oracle-email-address\u0026gt;\u0026#34; git config --global core.ignoreCase false This last command is critical if you are developing on either Windows or macOS. Yes, the macOS file system is, by default, case-insensitive!\n  Clone the git repository on GitHub at https://github.com/oracle/weblogic-toolkit-ui.\n  Open a command line in the weblogic-toolkit-ui directory and run npm install to download and install the JavaScript dependencies required by the project.\n  Open a command line in the weblogic-toolkit-ui/electron directory and run npm run install-tools.\n  Open a command line in the weblogic-toolkit-ui/webui directory and run npm start.\n  After the server from the previous step is fully running, open a command line in the weblogic-toolkit-ui/electron directory and run npm start.\n  Building a Windows or macOS installer Set up your development environment and verify that the application is working properly from it. Open a command line in the weblogic-toolkit-ui/electron directory and run npm run build. Find the executable and installer(s) in the weblogic-toolkit-ui/dist directory.  Building a Linux installer Set up your development environment and verify that the application is working properly from it. Open a command line in the weblogic-toolkit-ui/webui directory and run npm run build:release. From the command line in the weblogic-toolkit-ui/scripts directory, run ./devBuildLinuxInstallers.sh. Find the executable and installer(s) in the weblogic-toolkit-ui/dist directory.  "
},
{
	"uri": "https://oracle.github.io/weblogic-toolkit-ui/setup/quickstart/",
	"title": "Quick Start Guide",
	"tags": [],
	"description": "Use the Quick Start guide to exercise WKT UI functionality and deploy a sample application.",
	"content": "This Quick Start guide provides a comprehensive tutorial designed to step you through WebLogic Kubernetes Toolkit UI (WKTUI) functionality and familiarize you with its capabilities. WKTUI is a desktop application that helps you create and deploy WebLogic domains into Kubernetes. Using this guide, you will deploy a sample WebLogic-based application to a Kubernetes cluster.\nNote that this walk-through is for demonstration purposes only, not for use in production. These instructions assume that you are already familiar with Kubernetes. For this exercise, you’ll need a Kubernetes cluster. If you need help setting one up, see these instructions for setting up an Oracle Cloud Infrastructure Container Engine for Kubernetes (OKE) cluster.\nThe Quick Start guide is divided into the following sections:\n Prerequisites Get the ToDo List sample application Set up the WKTUI application Select the Project Settings Create the WebLogic Deploy Tooling model Create images with the WebLogic Image Tool WebLogic Kubernetes Operator (WKO) Track: follow these steps if you are interested in using a Kubernetes cluster without Verrazzano.  Configure Kubernetes Cluster Connectivity Install the WebLogic Kubernetes Operator Deploy the Domain Install and Configure the Ingress Controller Access the ToDo List Application   Verrazzano (VZ) Track: follow these steps if you are interested in using a Kubernetes cluster with Verrazzano.  Configure Kubernetes cluster connectivity Install Verrazzano Deploy the Verrazzano Component for the WebLogic Domain Deploy the Verrazzano Application Access the ToDo List Application   Summary Advanced  Offline Discover Online Remote Discover    "
},
{
	"uri": "https://oracle.github.io/weblogic-toolkit-ui/setup/quickstart/qs-kubernetes/k8s-access-app/",
	"title": "Access the ToDo List application",
	"tags": [],
	"description": "Access the ToDo List application.",
	"content": "After the Update Ingress Routes action completes, the Ingress Route Configuration table is updated with the actual URL to use to access the application, as shown in the following image.\nWhen you click the URL link, the following image shows the browser window that WKTUI opens. Now, you can use the ToDo list application.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-toolkit-ui/setup/quickstart/qs-verrazzano/vz-access-app/",
	"title": "Access the ToDo List application",
	"tags": [],
	"description": "Access the ToDo List application.",
	"content": "After the application is deployed and the WebLogic Domain is up and running, click Update URLs to update the URL with the actual hostname, which will also activate the link, as shown in the following image.\nClick on the link to go to your application, as shown in in the following image. Note that because your installation is using self-signed certificates, the browser will likely warn you that going to the application is unsafe. This is typical for an example environment. Now, you can use the ToDo list application.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-toolkit-ui/setup/quickstart/create-wdt-model/",
	"title": "Create the WebLogic Deploy Tooling model",
	"tags": [],
	"description": "",
	"content": "The WebLogic Deploy Tooling project provides a set of single-purpose tools for performing lifecycle operations of WebLogic Server domains. These tools work off a model of the domain. The model contains three types of files:\n Model file – A YAML description of the domain that is aligned with WebLogic Scripting Tool (WLST) offline folders and attributes. Variables file – An optional Java properties file that contains key/value pairs where the key matches with a token placed in the model file. Archive file – An optional ZIP file that contains any file artifacts that need to exist in the domain, for example, a WAR file that contains the binaries for a Web application.  For more detailed WDT information, see the WebLogic Deploy Tooling documentation.\nWKTUI provides tooling to make it easy for you to create and edit a WDT model. This image shows the Model page, Design View tab that allows visual editing of a model using WebLogic Remote Console screens.\nThe following image shows the Model page, Code View tab that lets you directly edit each of the three different file types that make up the model. In the center of the screen, you\u0026rsquo;ll find the YAML editor for the model file. On the right, you\u0026rsquo;ll find the variables file editor and the archive file editor. At this point, all the sections are blank.\nWKTUI also supports discovering an existing domain to extract the model for that domain. It accomplishes this by using the WDT Discover Domain tool. To use this functionality, you use the File menu, Add Model submenu. The two menu items are:\n Discover Model (offline) – With this option, WDT reads the domain directory from the local file system to extract the model files. Discover Model (online) – With this option, WDT connects to the domain’s running Administration Server to extract the model files. To collect all of the archive file contents automatically, the domain must be running on the local machine so that WDT has access to the domain’s file system.  To collect the model from a domain running on another machine, you can use the Remote Discovery option. With this option, at the end of the Discover Domain (online) action, WDT will tell you which files you need to collect and add to the archive file.\nBecause the ToDo List application has minimal requirements from the domain, you will create the model by hand. If you would prefer to create a local domain and use the discover model functionality, see Create ToDo List Domain in the Advanced section.\nCreate the ToDo List Domain Start on the Model Design View tab, which will default to the Domain element, General tab. Set the Name field to todolist_domain and enable Production Mode, as shown in the following image.\nNext, you need to create a server template that you will use with your dynamic cluster. Select the Server Templates element, add a new server template with the name todo-srv-template, and then click Create. After you create the template, enable Listen Port Enabled so that the screen looks like the following image.\nNext, select the three dots to the right of the Cluster field, drop-down menu, and select the Create New Cluster menu item. Create a new cluster with the name mycluster. Then, in the drop-down menu, select it as the Cluster attribute of the server template.\nNavigate to the new cluster, Clusters \u0026gt; mycluster, and select the Dynamic tab. Set the fields to the values specified in the following table.\n   Field Name Value     Server Template todo-srv-template   Server Name Prefix ToDoServer-   Dynamic Cluster Size 10   Max Dynamic Cluster Size 10   Enable Calculated Listen Ports Off    Create a Data Source The next step is to create a data source to communicate with the MySQL database. Before doing that, switch to the Code View tab to see what the WDT model looks like so far.\nAs you can see in the preceding image, the settings you entered are represented in the YAML Editor. Notice that the model editor inserted the fields for the domain’s administrative user name and password, and set the values to tokens of the form @@PROP:\u0026lt;property-name\u0026gt;@@. These tokens reference variables; you can see that the variable names were added to the Variables Editor. Go ahead and fill in the values you want to use; for example, weblogic for the user name and a strong password value for the password. Now, switch back to the Design View tab.\nGo to the Services \u0026gt; Data Sources area, add a new Data Source using the values in the following table, and then click Create. Note that you can choose any database user name and password below. Just make sure that you use these same credentials when deploying the MySQL database later.\n   Field Name Value     Name myDataSource   JNDI Names jdbc/ToDoDB   Targets mycluster (move to Chosen column)   Datasource Type Generic Data Source   Database Type MySQL   Database Driver MySQL’s Driver (Type 4) Versions: using com.mysql.cj.jdbc.Driver   Global Transactions Protocol OnePhaseCommit   Database Name tododb   Host Name mysql   Port 3306   Database User Name Choose a database user name   Password Choose a database password for the database user    After the myDataSource Data Source is created, go to the Connection Pool \u0026gt; Advanced tab and make the following changes:\n Enable Test Connection On Reserve. Set the Test Table Name to ToDos.  Now, you need to add the application. Go to Deployments \u0026gt; App Deployments, add a new application using the values in the following table, and then click Create. You must replace the $QS_HOME value in the table with the path where you stored the Quick Start directory when downloading the code. Note that after the actual file system location is entered, the value will change to reflect its path in the archive file (wlsdeploy/applications/todo.war).\n   Field Name Value     Name todo   Targets mycluster (move to Chosen column)   Add Source to Archive ON   Source $QS_HOME/app/target/todo.war    Even though the model is complete enough to create a local domain, you still need to add a few fields so that the WebLogic Kubernetes Operator can use the model. Switch back to the Code View tab. You will edit the model directly this time. Make the topology section of the model look like the following.\ntopology: Name: todolist_domain ProductionModeEnabled: true AdminServerName: AdminServer Server: AdminServer: Cluster: mycluster: DynamicServers: ServerTemplate: 'todo-srv-template' ServerNamePrefix: 'ToDoServer-' DynamicClusterSize: 10 MaxDynamicClusterSize: 10 CalculatedListenPorts: false MinDynamicClusterSize: 0 ServerTemplate: 'todo-srv-template': ListenPortEnabled: true Cluster: mycluster Validate and Prepare the Model The domain model is now complete. Go ahead and validate the model by clicking Validate Model or using the Go menu, Validate Model Files menu item. Doing this will invoke the WDT Validate Model Tool and the Console window at the bottom of the screen will display the output of the tool, as shown in the following image. You can close the Console Window at any time.\nWhen deploying a domain in Kubernetes, you need to prepare it for that environment. The WDT Prepare Model Tool gives you what you need to accomplish that. WKTUI has a special integration with Prepare Model in that not only does it adjust the model for the Kubernetes environment, but also it returns data extracted from the model that WKTUI needs. For example, Prepare Model returns the list of WebLogic clusters and non-clustered managed servers that other parts of the application use to tailor the environment for this domain. Click Prepare Model to invoke the WDT Prepare Model Tool.\nBecause you chose to use Model-in-Image for the Quick Start exercise, Prepare Model made several changes to your model.\n Replaced credentials with tokens that reference Kubernetes Secrets. Replaced fields like the Data Source URL with a token that references a variable.  The following image shows the completed model that is ready to put in an image, so save the project before you move to the next section.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-toolkit-ui/navigate/kubernetes/",
	"title": "Kubernetes",
	"tags": [],
	"description": "",
	"content": "The Kubernetes section and its four subsections support deploying a WebLogic-based application to a Kubernetes cluster where the WebLogic domain will be managed by the WebLogic Kubernetes Operator. It includes sections to help you:\n Configure your Kubernetes client (kubectl) to connect to the Kubernetes cluster. Install the WebLogic Kubernetes Operator. Deploy the WebLogic domain\u0026rsquo;s Domain resource configuration used by WebLogic Kubernetes Operator. Install an ingress controller, if needed, and add ingress routes to allow access to the WebLogic domain from outside the Kubernetes cluster.   Client Configuration  Client Configuration helps you get the necessary connectivity to your Kubernetes cluster.\n WebLogic Kubernetes Operator  Install the WebLogic Kubernetes Operator in the target Kubernetes cluster.\n WebLogic Domain  Create and deploy the Kubernetes custom resource for the WebLogic domain.\n Ingress Controller  Install and configure an ingress controller.\n "
},
{
	"uri": "https://oracle.github.io/weblogic-toolkit-ui/setup/quickstart/create-images-with-wit/",
	"title": "Create images with the WebLogic Image Tool",
	"tags": [],
	"description": "",
	"content": "WKTUI uses the WebLogic Image Tool (WIT) to build container images. Each Oracle Fusion Middleware (FMW) Domain Target Location option has its own image requirements.\n Model-in-Image – MII has two approaches:  Single Image – This approach uses a single image with Java, FMW, WDT, and the WDT model files all built into a single image. In WKTUI, we use the Primary Image tab to build such an image. Dual Images – This approach puts Java and FMW into one image, which WKTUI calls the primary image, and WDT and the WDT model files into a separate image, known as the auxiliary image. In this document, we refer to this as MII with Auxiliary Image.   Domain-in-Image – DII uses a single image approach but uses WDT and the WDT model files to create the domain inside the image. Domain-on-PV – DoPV uses a single image with Java and FMW in it. The domain is created on the persistent volume by external means.  Both MII with Auxiliary Image and Domain-on-PV have an image containing only software (Java and FMW) with no configuration. This provides several important, operational advantages:\n Multiple domains can share the same software-only image since no domain-specific configuration is included. Updating hundreds of domains that all share the same image is as simple as updating the WebLogic Kubernetes Operator Domain custom resource specification to change the image. WKO will detect this change and perform a rolling update of the domain, starting with the Administration Server. The Oracle Container Registry (OCR) distributes prebuilt images that you can use directly, after you log in and accept the terms and conditions. Oracle customers with an active support contract can access prebuilt images with the latest set of recommended patches. See https://container-registry.oracle.com for more information about the prebuilt images and to accept the terms and conditions for the repositories of interest.  With DII and MII (without an auxiliary image), you would need to build new images for every domain to roll out a security fix across our entire set of domains. For those with large numbers of domains, this becomes a heavy burden, leading to less secure environments. To take advantage of these operational advantages, you will use MII with Auxiliary Image for the ToDo List domain.\nGo to the Image page, shown in the following image.\nYou could build your own primary image by enabling Create New Primary Image, which is off by default. To do this, you would need to download the Java 11 JDK and WebLogic Server 14.1.1 installers, fill out the form, and run Create Primary Image. Then, you would need to create an image repository in an image registry somewhere and push the newly created image there. When Oracle releases the next set of patches, you would have to do it again.\nFortunately, you can simply use the prebuilt images in OCR. Log into OCR and select the Middleware category. For those without Oracle Support credentials, make sure that you have accepted the terms and conditions for the weblogic repository. In the following image, note the green checkmark at the end of the weblogic repository row. For those with Oracle Support credentials, it is highly recommended to use the weblogic_cpu repository at the bottom of the page instead.\nFor this exercise, you will create a new auxiliary image. This is the default setting and the Auxiliary Image tab is active. Select the Auxiliary Image tab, as shown in the following image.\nThe first thing you need to decide is what image registry to use for the auxiliary image. For this exercise, you will use the Container Registry from the Oracle Cloud (OCIR) but feel free to substitute another image registry. We will try to point out where your image registry selection impacts the rest of the example.\nAfter logging in to your Oracle Cloud account, select to the Container Registry option under the Developer Services category, as shown in the following image.\nIn the registry of your choosing, create a new private repository called wktui-qs/todolist-aux. Note the URL needed to access the new repository. For the OCIR repository, the URL is of the form \u0026lt;region-abbreviation\u0026gt;.ocir.io/\u0026lt;tenancy-name\u0026gt;/wktui-qs/todolist-aux, where region-abbreviation is something like phx (for the Phoenix region) and tenancy name is the name of the tenancy used to log in to https://cloud.oracle.com. For a listing of every available region, refer to this table.\nTo access this OCIR repository from Docker and Kubernetes, you need to use an Auth Token associated with your account in place of your password. To create an Auth Token, go to your User settings, select the Auth Tokens option under Resources, and click Generate Token, as shown in the following image. Make sure to retain a copy of the generated token, because this is the only opportunity you will have to see it in clear text!\nNow that your Image Registry is ready, you simply fill out the Auxiliary Image tab in WKTUI. There are a couple of things to note before you fill out the form.\n Most image registries require authentication to push an image. If you are using OCIR, the Auxiliary Image Registry Push Username and Auxiliary Image Registry Push Password must do the following:  Username: Must be of the form \u0026lt;tenancy-name\u0026gt;/\u0026lt;username\u0026gt;. Password: Must be the value an Auth Token associated with the user’s account.   By default, WIT (and therefore WKTUI) use BusyBox as the base image for an auxiliary image. Because BusyBox typically comes from Docker Hub and Docker Hub has implemented anonymous pull request throttling, it is a good idea to enter a valid Docker Hub Username and Docker Hub Password to minimize the change of throttling-related errors while building the image. You can change the base image simply by enabling Use Custom Base Image and filling out the form. If your target platform is OpenShift, enable Make Image Compatible with OpenShift in the Advanced section of the page.  With these things in mind, fill out the form using the data in the following table. If a field’s value is not provided, then leave it set to the default unless otherwise required for your environment.\n   Field Name Value     Auxiliary Image Tag \u0026lt;image-repository-url\u0026gt;:1.0; for example, phx.ocir.io/mytenancy/wktui-qs/todolist-aux:1.0   Specify Auxiliary Image Push Credentials ON   Auxiliary Image Registry Push Username \u0026lt;tenancy\u0026gt;/\u0026lt;username\u0026gt;; for example, mytenancy/fred.jones@mycompany.com   Auxiliary Image Registry Push Password \u0026lt;auth-token-value\u0026gt;; for example, z+M3C2UqRraHG73Z+.X8   Use Custom Base Image OFF   Docker Hub Username Your Docker Hub account user name   Docker Hub Password Your Docker Hub account password   Download and Use Latest WebLogic Deploy Tooling Installer ON   Make Image Compatible with Open Shift OFF (unless required for your environment))    After you complete the form, you are ready to create the auxiliary image. Click Create Auxiliary Image to have the application invoke WIT with the specified set of arguments to build the auxiliary image. The application prompts you twice prior to running WIT’s createAuxImage command:\n You always should run Prepare Model prior to creating the auxiliary image. Because you have already done that, select No to continue without running Prepare Model. You need to choose the location to store the downloaded WDT installer. Choose the location and Click Select.  The following image shows the application after successfully creating the auxiliary image.\nNow, you are ready to push the auxiliary image to the image registry. If running on macOS, you need to make sure that your Docker (or Podman) executable directory (for example, $HOME/.rd/bin, if using Rancher Desktop) is added to the Extra Path Directories table on the Project Settings page. Doing this allows Docker to find the executable it uses to interact with the macOS Keychain for storing credentials.\nClick Push Auxiliary Image. At this point, you are ready to shift your focus to the Kubernetes cluster. Remember, any change to the model files requires creating a new auxiliary image, which may require rerunning Prepare Model if fields were added to the model’s YAML file. We strongly recommend that you always increment the version number of the Auxiliary Image Tag field prior to creating and pushing a new image. This will make it very clear which image is in use.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-toolkit-ui/navigate/verrazzano/",
	"title": "Verrazzano",
	"tags": [],
	"description": "",
	"content": "The Verrazzano section and its four subsections support deploying a WebLogic-based application to a Kubernetes cluster where the WebLogic domain will be managed by Verrazzano. It includes sections to help you:\n Configure your Kubernetes client (kubectl) to connect to the Kubernetes cluster. Install Verrazzano. Create and deploy the Verrazzano component for the WebLogic domain. Deploy an application to Verrazzano.   Client Configuration  Client Configuration helps you get the necessary connectivity to your Kubernetes cluster.\n Installation  Install Verrazzano in the target Kubernetes cluster.\n Component  Create and deploy the Verrazzano component for the WebLogic domain.\n Application  Define and deploy a Verrazzano application.\n "
},
{
	"uri": "https://oracle.github.io/weblogic-toolkit-ui/setup/quickstart/qs-kubernetes/",
	"title": "WebLogic Kubernetes Operator",
	"tags": [],
	"description": "",
	"content": "These Quick Start guide sections are for users interested in using a Kubernetes cluster without Verrazzano. Anyone using OpenShift should following this track.\n Configure your Kubernetes client (kubectl) to connect to the Kubernetes cluster. Install WebLogic Kubernetes Operator. Deploy the Domain. Install and Configure the Ingress Controller and add ingress routes to allow access to the WebLogic domain from outside the Kubernetes cluster. Access the ToDo List application.  "
},
{
	"uri": "https://oracle.github.io/weblogic-toolkit-ui/setup/quickstart/qs-verrazzano/",
	"title": "Verrazzano",
	"tags": [],
	"description": "",
	"content": "These Quick Start guide sections are for users interested in using a Kubernetes cluster with Verrazzano.\n Configure Kubernetes cluster connectivity. Install Verrazzano. Deploy the Verrazzano Component for the WebLogic Domain. Deploy the Verrazzano Application. Access the ToDo List Application.  "
},
{
	"uri": "https://oracle.github.io/weblogic-toolkit-ui/setup/quickstart/qs-summary/",
	"title": "Summary",
	"tags": [],
	"description": "",
	"content": "By following the steps in this Quick Start guide, you:\n Configured WKTUI and set up a new project. Manually created and edited a WDT model of a WebLogic domain using the Design View for visual editing of the model and the Code View for viewing and editing model-related files. Pulled a prebuilt (primary) image from the Oracle Container Registry and then manually created an auxiliary image. Deployed a MySQL database. Depending on the track you followed:  Installed the WebLogic Kubernetes Operator to deploy your domain, then installed and configured an ingress controller to expose the sample application and provide its access in a browser window. Otherwise, installed Verrazzano to define and deploy the sample application, and also employed an ingress controller to access the application in a browser window.   Optionally, used the instructions in the Advanced section to discover the domain model offline or online remotely.  In summary, you used comprehensive WKTUI functionality to take an on-premises, sample WebLogic domain and deploy it in Kubernetes.\n"
},
{
	"uri": "https://oracle.github.io/weblogic-toolkit-ui/setup/quickstart/qs-advanced/",
	"title": "Advanced",
	"tags": [],
	"description": "Use the these sections to walk-through examples of offline discovery and online remote discovery.",
	"content": "As mentioned previously, WKTUI lets you add a model to the project by discovering the model from an existing domain. To do this, WKTUI uses the WDT Discover Domain Tool.\nDiscover Domain has two primary modes of operation:\n Offline Discovery – Uses WLST offline to read the domain directory directly. Online Discovery – Uses WLST online to make a connection to the Administration Server and discover the configuration by API calls.  Even with online discovery, WDT requires access to the Administration Server file system in order to collect any files referenced by the domain (for example, application EAR file, CLASSPATH JAR file, database wallet). Online discovery also has a -remote option that preforms the discovery and does its best to inform you of the files required by the domain. This is an imperfect solution; for example, a domain may depend on JAR files in the $DOMAIN_HOME/lib directory. Unfortunately, there is no way for remote discovery to determine that these files are present using remote API calls.\nBecause your ToDo List domain is simple, in these sections, you will see examples of both offline discovery and online remote discovery. Online, non-remote, discovery is very similar process-wise to online remote discovery (except that you won’t need to build the archive file). To get started, you will need to set up a local domain.\nCreate the Local ToDo List Domain The WKTUI QuickStart bundle includes scripts to help accomplish this goal. Go to the directory where you expanded the QuickStart ZIP file; we refer to this directory as $WKTUI_QS_HOME in the following instructions.\nDo the following steps:\n In the $WKTUI_QS_HOME directory, edit the appropriate setQuickstartEnv script file (for example, setQuickstartEnv.ps1 on Windows or setQuickstartEnv.sh on macOS or Linux) to match the local machine’s environment and your Oracle account credentials. Source (or run) the script file to set the environment variables used by the other scripts. Change to the $WKTUI_QS_HOME/scripts/local-domain directory. To start the MySQL database in a container, run the appropriate startMySQL script. To create the domain, run the appropriate createToDoListDomain script. Start the Administration Server of the newly created domain using the $WKTUI_QS_HOME/todolist_domain/startWebLogic script. After the Administration Server is started, open another command-line window, change to the $WKTUI_QS_HOME/todolist_domain directory, and run the appropriate bin/startManagedWebLogic script like this:  $ bin/startManagedWebLogic.sh ToDoServer-1 http://localhost:7001 When prompted, enter the WebLogic Server user name and password chosen when running the createToDoListDomain script. Verify that the application is working properly by opening http://localhost:7100/todo in your browser. You will see Derek’s ToDo List with five items, as shown in the following image.\n Offline Discover  Add Model Using Discover Model (Offline)\n Online Remote Discover  Add Model Using Remote Online Discovery\n "
},
{
	"uri": "https://oracle.github.io/weblogic-toolkit-ui/release/release-1.6.2/",
	"title": "Release 1.6.2",
	"tags": [],
	"description": "",
	"content": "Changes in Release 1.6.2  Major New Features Other Changes Bugs Fixes Known Issues  Major New Features None\nOther Changes  #287 - Added support for WebLogic Kubernetes Operator domain specification\u0026rsquo;s precreateService setting.  Bug Fixes  #286 - Fixed an issue related to SSL termination and pass through Ingress resource generation.  Known Issues  On Linux, the open and save dialogs open behind the main application window. This is due to Electron bug 32857. When deploying a Verrazzano application, the Get Application Status button only checks the status of the project\u0026rsquo;s Verrazzano component containing the WebLogic domain specification. Verrazzano installation does not support a multicluster installation. Verrazzano Application components Ingress Trait Rules table\u0026rsquo;s URL column does not properly account for multicluster applications. The Update URL button will only get information from the admin (i.e., local) cluster.  "
},
{
	"uri": "https://oracle.github.io/weblogic-toolkit-ui/release/",
	"title": "Release Notes",
	"tags": [],
	"description": "",
	"content": "Changes in Release 1.6.3  Major New Features Other Changes Bugs Fixes Known Issues  Major New Features None\nOther Changes  #293 - Updated Model Design View to use WebLogic Remote Console 2.4.8  Bug Fixes None\nKnown Issues  On Linux, the open and save dialogs open behind the main application window. This is due to Electron bug 32857. When deploying a Verrazzano application, the Get Application Status button only checks the status of the project\u0026rsquo;s Verrazzano component containing the WebLogic domain specification. Verrazzano installation does not support a multicluster installation. Verrazzano Application components Ingress Trait Rules table\u0026rsquo;s URL column does not properly account for multicluster applications. The Update URL button will only get information from the admin (i.e., local) cluster.  "
},
{
	"uri": "https://oracle.github.io/weblogic-toolkit-ui/release/release-1.6.1/",
	"title": "Release 1.6.1",
	"tags": [],
	"description": "",
	"content": "Changes in Release 1.6.1  Major New Features Other Changes Bugs Fixes Known Issues  Major New Features None\nOther Changes None\nBug Fixes  #281 - Fixed issue with Ingress Controller shell script not using elif. #282 - Fixed issue with busy dialog referencing \u0026ldquo;auxiliary image\u0026rdquo; while building a domain creation image. #283 - Fixed a typo in the Verrazzano application page in its reference to the Manual Scaler trait. #285 - Fixed issues with the Domain shell script when using JRF domains on a persistent volume.  Known Issues  On Linux, the open and save dialogs open behind the main application window. This is due to Electron bug 32857. When deploying a Verrazzano application, the Get Application Status button only checks the status of the project\u0026rsquo;s Verrazzano component containing the WebLogic domain specification. Verrazzano installation does not support a multicluster installation. Verrazzano Application components Ingress Trait Rules table\u0026rsquo;s URL column does not properly account for multicluster applications. The Update URL button will only get information from the admin (i.e., local) cluster.  "
},
{
	"uri": "https://oracle.github.io/weblogic-toolkit-ui/release/release-1.5.3/",
	"title": "Release 1.5.3",
	"tags": [],
	"description": "",
	"content": "Changes in Release 1.5.3  Major New Features Other Changes Bugs Fixes Known Issues  Major New Features None\nOther Changes  #242 - Added initial (very minimal) internationalization support bundles. #245 - Added an Ingress Controller Service Type field that can be used when installing an ingress controller to a Kubernetes cluster without a load balancer.  Bug Fixes  #241 - Fixed a bug with the WebLogic Image Tool\u0026rsquo;s --wdtHome argument when it ended with weblogic-deploy. #246 - Worked around a WebLogic Kubernetes Operator issue where the javaLoggingFileSizeLimit value was not working due to Helm issue 1707. #247 - Fixed issue with Open Project when storing the credentials in the project and entering the wrong passphrase that was causing the UI to not allow re-opening the project.  Known Issues  In the Model Design View when creating an App Deployment or Shared Library, changing the Source field back to an empty value results in a bogus error message about not removing the deployment from the archive file. This error is harmless so simply dismiss the error dialog and continue. On Linux, the open and save dialogs open behind the main application window. This is due to Electron bug 32857. When deploying a Verrazzano application, the Get Application Status button only checks the status of the project\u0026rsquo;s Verrazzano component containing the WebLogic domain specification. Verrazzano installation does not support a multicluster installation.  "
},
{
	"uri": "https://oracle.github.io/weblogic-toolkit-ui/release/release-1.6.0/",
	"title": "Release Notes 1.6.0",
	"tags": [],
	"description": "",
	"content": "Changes in Release 1.6.0  Major New Features Other Changes Bugs Fixes Known Issues  This release has major usability changes to clearly delineate the following use cases:\n A project that contains a WDT model A project that does not have a model but uses an \u0026ldquo;external image\u0026rdquo; that contains a model A project with no model  When actions are not relevant to the use case, action buttons and Go menu items are hidden. When the project does not contain a model, the Model page is disabled. When the project is using an external image that contains a model, the user is allowed to specify the clusters, variable overrides, and secrets from this external model.\nMajor New Features None\nOther Changes  #250 - Changed domain spec default auxiliary image locations to align with those on the image page. This allows the user to switch back-and-forth between creating and using an auxiliary image without modifying location field values. #251 - Added Inspect Image button to allow users to locate the WDT Model and Install Home locations in an external image. #253 - Added support for SAML2 Data Initialization files to the Model Archive Editor. #254, #255, #256, #258, #260, #265, #267 - Added support for WebLogic Kubernetes Operator 4.1.0 domain creation images. #257 - Changed the action buttons and Go menu items to dynamically show/hide themselves based on the use case selected. #259 - Added the ability to set domain-wide environment variables in the WebLogic Kubernetes Operator domain spec. #268 - Reorganized the Secrets table to better support any extra secrets required by the model. #270 - Added a warning for Verrazzano users using OKE Native Pod Networking. #280 - Enhanced the Verrazzano Application page\u0026rsquo;s Add Components dialog to allow multiple components to be selected at a time.  Bug Fixes  #261 - Fixed a bug with the Model Archive Editor that was preventing adding name-segregated entries from working correctly. #262 - Fixed a bug related to getting the WebLogic Kubernetes Operator version when the logs were too large. #264 - Fixed a bug that caused the Verrazzano installation to use the wrong Verrazzano Platform Operator URL in some cases. #276 - Fixed a bug where the WebLogic Kubernetes Operator cluster resources were created after the domain resource, which resulted in a temporary error condition when the operator analyzed the domain. This fix results in the Code View showing the cluster resources before the domain resource. #277 - Added a missing tooltip to the Verrazzano Application component\u0026rsquo;s Ingress Trait Rules table Update URLs button to clarify that it should only be used after the application status is complete. #279 - Fixed a bug that was causing the title of the Update URLs error dialog box to display the i18n key instead of the text.  Known Issues  On Linux, the open and save dialogs open behind the main application window. This is due to Electron bug 32857. When deploying a Verrazzano application, the Get Application Status button only checks the status of the project\u0026rsquo;s Verrazzano component containing the WebLogic domain specification. Verrazzano installation does not support a multicluster installation. Verrazzano Application components Ingress Trait Rules table\u0026rsquo;s URL column does not properly account for multicluster applications. The Update URL button will only get information from the admin (i.e., local) cluster.  "
},
{
	"uri": "https://oracle.github.io/weblogic-toolkit-ui/release/release-1.5.2/",
	"title": "Release 1.5.2",
	"tags": [],
	"description": "",
	"content": "Changes in Release 1.5.2  Major New Features Other Changes Bugs Fixes Known Issues  Major New Features None\nOther Changes None\nBug Fixes  #232 - Fixed an issue in the Verrazzano Application page where the component\u0026rsquo;s Ingress Trait Rule destination names were not properly converted to legal Kubernetes names so that they would match the generated service names when the domain, cluster, or server names combinations had more than one disallowed characters in them.  Known Issues  In the Model Design View, changing the Source Path and Plan Path fields for existing App Deployments and Shared Libraries is broken in this release. To work around it, either remove and recreate the deployment or use the Model Code View\u0026rsquo;s Model Editor and Archive Editor to make the appropriate changes. In Model Design View, the Plan/Plan Path fields for App Deployments mistakenly allow you to select a directory. This is not valid and will result in an error. Please make sure to select a file for any deployment plan. On Linux, the open and save dialogs open behind the main application window. This is due to Electron bug 32857. When deploying a Verrazzano application, the Get Application Status button only checks the status of the project\u0026rsquo;s Verrazzano component containing the WebLogic domain specification. Verrazzano installation does not support a multicluster installation.  "
},
{
	"uri": "https://oracle.github.io/weblogic-toolkit-ui/release/release-1.5.1/",
	"title": "Release 1.5.1",
	"tags": [],
	"description": "",
	"content": "Changes in Release 1.5.1  Major New Features Other Changes Bugs Fixes Known Issues  Major New Features None\nOther Changes None\nBug Fixes  #229 - Fixed issue in Domain resource generation on Windows inserting a path with Windows separators  Known Issues  In the Model Design View, changing the Source Path and Plan Path fields for existing App Deployments and Shared Libraries is broken in this release. To work around it, either remove and recreate the deployment or use the Model Code View\u0026rsquo;s Model Editor and Archive Editor to make the appropriate changes. In Model Design View, the Plan/Plan Path fields for App Deployments mistakenly allow you to select a directory. This is not valid and will result in an error. Please make sure to select a file for any deployment plan. On Linux, the open and save dialogs open behind the main application window. This is due to Electron bug 32857. When deploying a Verrazzano application, the Get Application Status button only checks the status of the project\u0026rsquo;s Verrazzano component containing the WebLogic domain specification. Verrazzano installation does not support a multicluster installation.  "
},
{
	"uri": "https://oracle.github.io/weblogic-toolkit-ui/release/release-1.5.0/",
	"title": "Release 1.5.0",
	"tags": [],
	"description": "",
	"content": "Changes in Release 1.5.0  Major New Features Other Changes Bugs Fixes Known Issues  Major New Features None\nOther Changes  #202 - Added support for Verrazzano 1.5.0+ (which uses WebLogic Kubernetes Operator 4.0.0+). #204 - Updated the Archive Editor to align with WebLogic Deploy Tooling 3.0.0+ changes to the archive format. #205 - Added support for installing the optional Verrazzano component Argo CD with Verrazzano 1.5.0+. #205 - Added support to configure Kubernetes connectivity data for Verrazzano managed clusters. #210 - Added support for Verrazzano Get Application Status action to check the status on the correct cluster using a multi-cluster application targeted to one or more managed clusters. #213 - Improved Verrazzano Ingress Trait rule editor to allow the user to choose the Destination Host by WebLogic cluster or non-clustered server name. #215 - Added a Update URLs button to the Verrazzano application\u0026rsquo;s Ingress Trait that populates the Ingress Rules table with a URL once the application deployment is complete. #221 - Streamlined the WKO Ingress Routes table to conserve space. #223 - Added Proxy URL validation to the network connection and User Preferences dialogs to make sure the user enters a URL and not just a host:port combination.  Bug Fixes  #201 - Fixed a bug where the project file was not being cleaned up properly when a cluster was removed and Prepare Model was run again. #205 - Fixed a bug that caused the Verrazzano Get Application Status call to fail. #211 - Fixed a bug with sorting the Ingress Rule\u0026rsquo;s Route Annotations table\u0026rsquo;s columns. #214 - Fixed a bug where the Verrazzano Check Verrazzano Install Status action was reporting installation is still in progress after a successful upgrade. #216 - Improved the behavior of the Model Code View sliders when the window is resized. #217 - Fixed a bug where the kubectl version output was reporting an incorrect server version number with newer versions of Kubernetes. #219 - Fixed a bug with Verrazzano 1.4.0+ installation where the wrong Verrazzano Platform Operator file name was being used. #220 - Cleaned up the table formatting/behavior across the application. #222 - Fixed a bug with container image tag validation that was causing regular expression catastrophic backtracking, leading to slow validation responses.  Known Issues  In the Model Design View, changing the Source Path and Plan Path fields for existing App Deployments and Shared Libraries is broken in this release. To work around it, either remove and recreate the deployment or use the Model Code View\u0026rsquo;s Model Editor and Archive Editor to make the appropriate changes. In Model Design View, the Plan/Plan Path fields for App Deployments mistakenly allow you to select a directory. This is not valid and will result in an error. Please make sure to select a file for any deployment plan. On Linux, the open and save dialogs open behind the main application window. This is due to Electron bug 32857. When deploying a Verrazzano application, the Get Application Status button only checks the status of the project\u0026rsquo;s Verrazzano component containing the WebLogic domain specification. Verrazzano installation does not support a multicluster installation.  "
},
{
	"uri": "https://oracle.github.io/weblogic-toolkit-ui/release/release-1.4.1/",
	"title": "Release 1.4.1",
	"tags": [],
	"description": "",
	"content": "Changes in Release 1.4.1  Major New Features Other Changes Bugs Fixes Known Issues  Major New Features None\nOther Changes  #192: Add the ability to install and work with older versions of operator using the latest published Helm chart.  Bug Fixes  Resolved issue Discover Model issue introduced in 1.4.0 by picking up the fix in WebLogic Deploy Tooling 2.4.1. Resolved issue with Deploy Domain failing due to a WebLogic Kubernetes Operator error from the new conversion/validating webhook (fix in a new published version of the WebLogic Kubernetes Operator 4.0.0 Helm chart). #190: Resolved a macOS-specific issue in check to see if the WebLogic Kubernetes Operator is already installed. #191: Resolved WebLogic Kubernetes Operator 4.0 issues with the Domain Resource spec generation. #191: Resolved an issue with WebLogic Kubernetes Operator 3.x where the wdtInstallHome was named incorrectly under one condition. #191: Resolved a gap in the functionality for WDT and Model locations in the Domain Resource spec when using images instead of creating them.  Known Issues  On Linux, the open and save dialogs open behind the main application window. This is due to Electron bug 32857. When deploying a Verrazzano application, the Get Application Status button only checks the status of the project\u0026rsquo;s Verrazzano component containing the WebLogic domain specification. WKTUI does not currently show the Verrazzano URL needed to access the application. The URL will always be of the form https://\u0026lt;gateway-hostname\u0026gt;/\u0026lt;app-path\u0026gt;, where the gateway-hostname is the name created by Verrazzano in the Gateway object. To get the name of the generated gateway object, run kubectl get gateway -n \u0026lt;namespace\u0026gt; --template '{{range .items}}{{.metadata.name}}{{\u0026quot;\\n\u0026quot;}}{{end}}'. Next, run kubectl get gateway \u0026lt;gateway-name\u0026gt; -n \u0026lt;namespace\u0026gt; -o yaml and review the hosts entry of the .spec.servers section to find the DNS name that corresponds to the gateway-hostname to use in the URL.  "
},
{
	"uri": "https://oracle.github.io/weblogic-toolkit-ui/release/release-1.4.0/",
	"title": "Release 1.4.0",
	"tags": [],
	"description": "",
	"content": "Changes in Release 1.4.0  Major New Features Other Changes Bugs Fixes Known Issues  Major New Features  #173: Added support for WebLogic Kubernetes Operator 4.0. While it is now the default, versions 3.3+ are still supported.  Other Changes  #175: Added Zoom In, Zoom Out, and Actual Size menu options to the Window menu. #178: Integrated the Prepare Model action with the changes in WebLogic Deploy Tooling 2.4.0. #179: Updated the WebLogic Remote Console integration to support version 2.4.1 (2.4.0 also supported). #188: Added file download functionality to all Code View pages  Bug Fixes  #171: Improved workaround for the issue limiting the ability to select text from the Code View scripts (WKTUI-375). #172: Resolved issue when using Domain-in-Image that was causing the domain to not be created. #174: Resolved an issue where the Install Ingress Controller action was always passing the image pull secret\u0026ndash;even when the user indicated not to use one. #176: Resolved an issue where the Update Ingress Routes action was always passing the SSL pass-through argument\u0026ndash;even when the user did not request it. #182: Resolved Verrazzano 1.4.0+ installation issue caused by a change in the published operator file name. #186: Resolved Verrazzano-related issue where Ingress Trait rules were not including the hosts or destination-related fields. #187: Resolved an issue where the operator domain variable override config map was not being created properly. #187: Resolved an issue with the apiVersion of the Verrazzano component- and application-related being incorrect. #189: Resolved a rendering issue on the Ingress Controller Code View page when switching tabs.  Known Issues  On Linux, the open and save dialogs open behind the main application window. This is due to Electron bug 32857. When deploying a Verrazzano application, the Get Application Status button only checks the status of the project\u0026rsquo;s Verrazzano component containing the WebLogic domain specification. WKTUI does not currently show the Verrazzano URL needed to access the application. The URL will always be of the form https://\u0026lt;gateway-hostname\u0026gt;/\u0026lt;app-path\u0026gt;, where the gateway-hostname is the name created by Verrazzano in the Gateway object. To get the name of the generated gateway object, run kubectl get gateway -n \u0026lt;namespace\u0026gt; --template '{{range .items}}{{.metadata.name}}{{\u0026quot;\\n\u0026quot;}}{{end}}'. Next, run kubectl get gateway \u0026lt;gateway-name\u0026gt; -n \u0026lt;namespace\u0026gt; -o yaml and review the hosts entry of the .spec.servers section to find the DNS name that corresponds to the gateway-hostname to use in the URL.  "
},
{
	"uri": "https://oracle.github.io/weblogic-toolkit-ui/release/release-1.3.0/",
	"title": "Release 1.3.0",
	"tags": [],
	"description": "",
	"content": "Changes in Release 1.3.0  Major New Features Other Changes Bugs Fixes Known Issues  Major New Features  Support for creating and deploying the Verrazzano component for the WebLogic domain, and an application that references it.  Other Changes  Updated the WebLogic Remote Console integration to support version 2.4.0. Added support for specifying node selectors when installing the WebLogic Kubernetes Operator and deploying the WebLogic domain, either directly or as a Verrazzano component. Added support for the user specifying the Helm timeout value when helm is used (i.e., Installing/updating WebLogic Kubernetes Operator and installing the Ingress Controller). Added tooltips across all icon buttons to describe what they do. Added an anti-affinity specification to the generated WebLogic domain resource, as recommended by the WebLogic Kubernetes Operator docs.  Bug Fixes  Fixed an issue introduced by newer WDT versions that was forcing the domain cluster size to only allow replicas to be set to 0 (WKTUI-365). #164: Fixed the link in the Introduction dialog to open in the user\u0026rsquo;s browser instead of inside the app. #167: Improved the validation logic and error messages around having an empty model. #170: Worked around an issue that was limiting the ability to select text from the Code View scripts (WKTUI-375).  Known Issues  On Linux, the open and save dialogs open behind the main application window. This is due to Electron bug 32857. When deploying a Verrazzano application, the Get Application Status button only checks the status of the project\u0026rsquo;s Verrazzano component containing the WebLogic domain specification. Due to the workaround for WKTUI-375, users are not able to tab to the script area of the Code View pages.  "
},
{
	"uri": "https://oracle.github.io/weblogic-toolkit-ui/release/release-1.2.0/",
	"title": "Release 1.2.0",
	"tags": [],
	"description": "",
	"content": "Changes in Release 1.2.0  Major New Features Other Changes Bugs Fixes  Major New Features  Model Design View added via integration with the WebLogic Remote Console 2.3.0. Users must download and install the WebLogic Remote Console version 2.3.x.  Other Changes  Added a new installer for macOS ARM. #141: Added support for WDT online remote discovery.  Bug Fixes  #107: Resolved an issue where the Save As functionality was not handling the archive file properly if there were no pending updates to the archive file (Jira WKTUI-322). Added missing service account argument for WebLogic Kubernetes Operator installation shell scripts (Jira WKTUI-337). #123: Changed Domain status message when domain status is available (Jira WKTUI-345). #127: Corrected an issue that was causing unsaved changes with no project to be lost when opening a new or existing project. #129: Fixed an issue where the wrong window was getting its title changed when opening a new project. #130: Fixed an issue where the window title was set incorrectly for a new or existing project. #131: Tightened up the logic for saving a project to get predictable results when encountering write permission errors. Fixed busy dialog messages used during WebLogic Kubernetes Operator installation and update. #136: Corrected app.addRecentDocument() handling so that the file always exists on disk prior to the call being made. #147: Corrected an issue with the PATH environment variable that was causing WebLogic Image Tool-related issues on Linux with Podman.  "
},
{
	"uri": "https://oracle.github.io/weblogic-toolkit-ui/release/release-1.1.1/",
	"title": "Release 1.1.1",
	"tags": [],
	"description": "",
	"content": "Changes in Release 1.1.1  Major New Features Other Changes Bugs Fixes Known Issues  Major New Features No new features.\nOther Changes  Revamped the Ingress Route editing mechanism:  Added busy dialog while fetching existing service data from the domain\u0026rsquo;s Kubernetes namespace prior to opening the route edit dialog. Added placeholders to the Target Service and Target Port fields to clarify the current state of these fields when no value is selected. Added logic to reset the Target Port field selection when the Target Service field changes and the selected port is not valid for the new service selected.   Reworked the Image page and related fields on the Domain page to improve usability. With these changes, a user not needing to create new images can bypass the Image page completely.  Converted Use Auxiliary Image and Create New Auxiliary Image switches to radio buttons to make the three options more clear. Moved the Image Tag and Image Registry Address fields from the Image page tabs to the Domain page when not creating a new image. Replicated the Create New Primary Image and Auxiliary Image Configuration controls from the Image page to the Domain page. Added navigation buttons on the Domain page to direct the user to go back to the Image page when creating a new image.   Bundled WebLogic Deploy Tooling 2.1.0. See WDT release notes for details. Reworked Model actions to work better for Domain in Image and Domain in PV use cases.  Enhanced Prepare Model action to use the new target types added in WebLogic Deploy Tooling 2.1.0 so that Prepare Model works properly for Model in Image, Domain in Image, and Domain in PV use cases. Removed Domain in PV check that was previously preventing both Validate Model and Prepare Model actions from being used.   Enhanced Domain page Cluster table to be editable when using Domain in PV to support use cases where the project has or doesn\u0026rsquo;t have a model. Converted all aria-label fields to use the i18n resource bundle. Removed webui unit tests from the installers.  Bug Fixes  Resolved issue with \u0026ldquo;Save As\u0026rdquo; when saving project file in a different directory. Resolved issue with \u0026ldquo;Save As\u0026rdquo; where the project was losing an entry for the archive file if no pending changes exist. Resolved issue where project file to window mapping was causing unnecessary reassigning of the credential manager. Added additional RPM installer dependencies to try to resolve installation issues when on a Linux VM not being used as a desktop machine. Added a native macOS ICNS icon to resolve mangled icon on macOS. Resolved issue with existing ingress route detection to eliminate overwrite warnings when route does not exist.  Known Issues   When running the WKT UI application on Windows, the image builder tool (Docker or Podman) also must be directly executable in Windows. For example, there is currently no support for running the WKT UI application in Windows and running Podman under the Windows Subsystem for Linux (WSL2). However, running Docker Desktop for Windows with a WSL2 backend is fully supported because the docker command is executable directly in Windows (without having to call WSL2). If you need to use Podman on Windows, then refer to the Podman blog entries at https://podman.io/blogs/2021/09/06/podman-on-macs.html and https://podman.io/blogs/2020/09/02/running_windows_or_mac.html for more information about downloading, installing, and configuring the Windows Remote Client.\n  On Linux, the application depends on libGL being installed. libGL is not currently listed in the dependencies list for the rpm (or deb) installers. Therefore, you will need to install libGL using your package manager. For example:\n sudo yum install libGL   When trying to run the application on a Linux machine and display it on a Windows machine, do not use the Xming X server. There appears to be a bug (presumably with their OpenGL support) that prevents applications using Electron 13.x or later from working (for example, Microsoft VS Code doesn\u0026rsquo;t work either).\n  The application is limited to working with archive files whose size is less than 2 GB.\n  "
},
{
	"uri": "https://oracle.github.io/weblogic-toolkit-ui/release/release-1.1.0/",
	"title": "Release 1.1.0",
	"tags": [],
	"description": "Install the WKT UI application and check for updates.",
	"content": "Changes in Release 1.1.0  Major New Features Other Changes Bugs Fixes Known Issues  Major New Features  Updated macOS environment control to specify extra environment settings to pass down to Docker/Podman, kubectl, and Helm invocations. Bundling WebLogic Deploy Tooling 2.0.0. See WDT release notes for details. New Validate Model action that leverages WDT 2.0 changes to validate the model files and reports any validation errors it finds. Updated Prepare Model action that leverages WDT 2.0 changes to improve model preparation for deploying with WebLogic Kubernetes Operator. Added support for splitting the FMW (WebLogic or FMW Infrastructure) and WDT model images (also known as auxiliary images).  New Create Auxiliary Image action to create an auxiliary image. New Push Auxiliary Image action to push an auxiliary image to an image registry.   New Update Operator action to apply changes such as a version upgrade to an existing WebLogic Kubernetes Operator installation. New Uninstall Operator action to uninstall the WebLogic Kubernetes Operator installation and optionally, its Kubernetes namespace. New Undeploy Domain action to undeploy an existing domain and optionally, its Kubernetes namespace. New Uninstall Ingress Controller action to uninstall the ingress controller installation and optionally, its Kubernetes namespace. Updated Ingress Route editing to improve control for SSL and provide lists of available target services and target ports.  Other Changes  Added the Save As menu item to allowing saving a project and any model files to a new name/location. Improved Internet connectivity check mechanism and added configurable timeout settings to address issues some users were having with the default OCI DNS settings causing extra long DNS name resolution times that were triggering the hard-coded timeout. Upgraded Electron to version 16. Upgraded the Model Code View page\u0026rsquo;s embedded ACE editor to 1.4.13. Relocated the older, macOS-specific Extra Path Directories functionality from the Kubernetes Client Configuration page to the Project Settings page to better align with new macOS environment settings and the scope to which they apply. Replaced Help menu\u0026rsquo;s Visit Website menu item with a View Documentation menu item that opens the WebLogic Kubernetes Toolkit UI documentation in the user\u0026rsquo;s browser. Added a result dialog to display the Primary Image\u0026rsquo;s custom base image\u0026rsquo;s content found by the Inspect Image action. Added a warning message to the Discover Model action if the project has existing model files that will be overwritten by the action. Changed the Windows and Linux About dialog to not be modal. Added Application Deployment Plan, Custom File, and Custom Directory option types to the Archive editor\u0026rsquo;s Add dialog.  Bug Fixes  Resolved macOS-specific issue with Quit WebLogic Kubernetes Toolkit UI where it required invoking it multiple times to exit the application. Resolved macOS-specific issue where Quit WebLogic Kubernetes Toolkit UI was not working if the About dialog window was the last window open. Resolved application update dialog issue where the Release Notes link was not opening in the user\u0026rsquo;s browser. Resolved all known issues with application update functionality on all platforms. Resolved Podman-related issues to pass key environment variables down to all podman executions. Resolved Podman-related issue with pushing to Docker Hub. Resolved issues with the Primary Image tab\u0026rsquo;s Inspect Image button. Resolved issue with Prepare Model action\u0026rsquo;s secret handling whereby domain secret values were being lost. Resolved an issue where double-clicking on an action button was causing multiple actions to run simultaneously. Worked around macOS-specific Electron issue that caused the model editor to not receive a blur event when using the application menus.  Known Issues   When running the WKT UI application on Windows, the image builder tool (Docker or Podman) also must be directly executable in Windows. For example, there is currently no support for running the WKT UI application in Windows and running Podman under the Windows Subsystem for Linux (WSL2). However, running Docker Desktop for Windows with a WSL2 backend is fully supported because the docker command is executable directly in Windows (without having to call WSL2). If you need to use Podman on Windows, then refer to the Podman blog entries at https://podman.io/blogs/2021/09/06/podman-on-macs.html and https://podman.io/blogs/2020/09/02/running_windows_or_mac.html for more information about downloading, installing, and configuring the Windows Remote Client.\n  On Linux, the application depends on libGL being installed. libGL is not currently listed in the dependencies list for the rpm (or deb) installers. Therefore, you will need to install libGL using your package manager. For example:\n sudo yum install libGL   When trying to run the application on a Linux machine and display it on a Windows machine, do not use the Xming X server. There appears to be a bug (presumably with their OpenGL support) that prevents applications using Electron 13.x or later from working (for example, Microsoft VS Code doesn\u0026rsquo;t work either).\n  The application is limited to working with archive files whose size is less than 2 GB.\n  "
},
{
	"uri": "https://oracle.github.io/weblogic-toolkit-ui/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "WebLogic Kubernetes Toolkit UI Documentation The WebLogic Kubernetes Toolkit (WKT) is a collection of open source tools that help you provision WebLogic-based applications to run in Linux containers on a Kubernetes cluster. WKT includes the following tools:\n WebLogic Deploy Tooling (WDT) - A set of single-purpose, lifecycle tools that operate off of a single metadata model representation of a WebLogic domain. WebLogic Image Tool (WIT) - A tool for creating Linux container images for running WebLogic domains. WebLogic Kubernetes Operator (WKO) - A Kubernetes operator that allows WebLogic domains to run natively in a Kubernetes cluster. WebLogic Remote Console - A lightweight console for managing WebLogic Server domains running anywhere.  The WKT UI provides a graphical user interface that wraps the WKT tools, Docker, Helm, and the Kubernetes client (kubectl) and helps guide you through the process of creating and modifying a model of your WebLogic domain, creating a Linux container image to use to run the domain, and setting up and deploying the software and configuration necessary to deploy and access the domain in your Kubernetes cluster.\nBe sure to check out the Quick Start guide for a tutorial, which will step you through WebLogic Kubernetes Toolkit UI (WKTUI) functionality and familiarize you with its capabilities.\nCurrent release WebLogic Kubernetes Toolkit UI version and release information can be found here.\nAbout the Documentation For detailed user information, read the following:\n About the WKT UI Application WebLogic Kubernetes Toolkit UI Prerequisites and Installation Navigate the WKT UI  Model Image Kubernetes Verrazzano    For developer information, see WebLogic Kubernetes Toolkit UI Project.\nGet Help We have a closely monitored public Slack channel where you can get in touch with us to ask questions about using the WebLogic Toolkit UI or give us feedback or suggestions about what features and improvements you would like to see. We would love to hear from you.\nTo join our public channel, please visit this site to get an invitation. The invitation email will include details of how to access our Slack workspace. After you are logged in, please come to #weblogic-kubernetes-toolkit and say, “hello!”\nRelated Projects For detailed documentation and access to WebLogic Toolkit-related projects, see:\n WebLogic Kubernetes Operator WebLogic Deploy Tooling WebLogic Image Tool Verrazzano  "
},
{
	"uri": "https://oracle.github.io/weblogic-toolkit-ui/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://oracle.github.io/weblogic-toolkit-ui/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]